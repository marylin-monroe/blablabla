// src/services/PollingService.ts
import { Logger } from '../utils/Logger';
import { SmartMoneyDatabase } from './SmartMoneyDatabase';
import { TelegramNotifier } from './TelegramNotifier';

export class PollingService {
  private logger: Logger;
  private httpUrl: string;
  private smDatabase: SmartMoneyDatabase;
  private telegramNotifier: TelegramNotifier;
  private isRunning: boolean = false;
  private intervalId: NodeJS.Timeout | null = null;
  private lastSignature: string | null = null;

  constructor(smDatabase: SmartMoneyDatabase, telegramNotifier: TelegramNotifier) {
    this.logger = Logger.getInstance();
    this.httpUrl = process.env.QUICKNODE_HTTP_URL!;
    this.smDatabase = smDatabase;
    this.telegramNotifier = telegramNotifier;
  }

  async start(): Promise<void> {
    if (this.isRunning) return;

    this.isRunning = true;
    this.logger.info('üîÑ Starting QuickNode polling service...');

    // –ü–æ–ª—É—á–∞–µ–º Smart Money –∫–æ—à–µ–ª—å–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    const smartWallets = await this.smDatabase.getAllActiveSmartWallets();
    const walletAddresses = smartWallets.map(w => w.address);

    this.logger.info(`üéØ Monitoring ${walletAddresses.length} Smart Money wallets`);

    // –ó–∞–ø—É—Å–∫–∞–µ–º polling –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    this.intervalId = setInterval(async () => {
      try {
        await this.pollWalletTransactions(walletAddresses);
      } catch (error) {
        this.logger.error('‚ùå Error in polling cycle:', error);
      }
    }, 10000); // 10 —Å–µ–∫—É–Ω–¥

    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    setTimeout(() => this.pollWalletTransactions(walletAddresses), 1000);
  }

  stop(): void {
    if (this.intervalId) {
      clearInterval(this.intervalId);
      this.intervalId = null;
    }
    this.isRunning = false;
    this.logger.info('üî¥ Polling service stopped');
  }

  private async pollWalletTransactions(walletAddresses: string[]): Promise<void> {
    if (walletAddresses.length === 0) return;

    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
      for (const walletAddress of walletAddresses.slice(0, 10)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 –∑–∞ —Ä–∞–∑
        await this.checkWalletTransactions(walletAddress);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
      }

    } catch (error) {
      this.logger.error('‚ùå Error polling wallet transactions:', error);
    }
  }

  private async checkWalletTransactions(walletAddress: string): Promise<void> {
    try {
      const response = await fetch(this.httpUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jsonrpc: '2.0',
          id: 1,
          method: 'getSignaturesForAddress',
          params: [
            walletAddress,
            {
              limit: 5, // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
              commitment: 'confirmed'
            }
          ]
        })
      });

      if (!response.ok) {
        this.logger.error(`HTTP error for wallet ${walletAddress}: ${response.status}`);
        return;
      }

      const data = await response.json() as any;
      
      if (data.result && Array.isArray(data.result)) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        for (const txInfo of data.result) {
          if (this.lastSignature && txInfo.signature === this.lastSignature) {
            break; // –î–æ—à–ª–∏ –¥–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
          }

          await this.processTransaction(txInfo.signature, walletAddress);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        if (data.result.length > 0) {
          this.lastSignature = data.result[0].signature;
        }
      }

    } catch (error) {
      this.logger.error(`Error checking transactions for wallet ${walletAddress}:`, error);
    }
  }

  private async processTransaction(signature: string, walletAddress: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      const response = await fetch(this.httpUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          jsonrpc: '2.0',
          id: 1,
          method: 'getTransaction',
          params: [
            signature,
            {
              encoding: 'jsonParsed',
              commitment: 'confirmed',
              maxSupportedTransactionVersion: 0
            }
          ]
        })
      });

      if (!response.ok) return;

      const data = await response.json() as any;
      
      if (data.result) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ swaps
        await this.analyzeTransactionForSwaps(data.result, walletAddress);
      }

    } catch (error) {
      this.logger.error(`Error processing transaction ${signature}:`, error);
    }
  }

  private async analyzeTransactionForSwaps(transaction: any, walletAddress: string): Promise<void> {
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ - –∏—â–µ–º token transfers
      const meta = transaction.meta;
      if (!meta || meta.err) return;

      const preTokenBalances = meta.preTokenBalances || [];
      const postTokenBalances = meta.postTokenBalances || [];

      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å—ã –¥–æ –∏ –ø–æ—Å–ª–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è swaps
      for (const postBalance of postTokenBalances) {
        if (postBalance.owner === walletAddress) {
          const preBalance = preTokenBalances.find(
            (pre: any) => pre.accountIndex === postBalance.accountIndex
          );

          const preAmount = preBalance ? parseFloat(preBalance.uiTokenAmount.uiAmountString || '0') : 0;
          const postAmount = parseFloat(postBalance.uiTokenAmount.uiAmountString || '0');
          const difference = postAmount - preAmount;

          if (Math.abs(difference) > 100) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–æ–∫–µ–Ω–∞—Ö
            this.logger.info(`üí∞ Detected token change: ${difference} ${postBalance.uiTokenAmount.uiAmountString} for wallet ${walletAddress}`);
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            // await this.sendSwapNotification(walletAddress, transaction, difference);
          }
        }
      }

    } catch (error) {
      this.logger.error('Error analyzing transaction for swaps:', error);
    }
  }

  getStats() {
    return {
      isRunning: this.isRunning,
      lastSignature: this.lastSignature,
      intervalActive: !!this.intervalId
    };
  }
}