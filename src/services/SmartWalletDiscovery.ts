// src/services/SmartWalletDiscovery.ts - –ê–ö–ö–£–†–ê–¢–ù–û –î–û–ë–ê–í–õ–ï–ù –í–ù–ï–®–ù–ò–ô –ü–û–ò–°–ö
import { SmartMoneyDatabase } from './SmartMoneyDatabase';
import { Database } from './Database';
import { Logger } from '../utils/Logger';
import { WalletAnalysisResult, WalletPerformanceMetrics } from '../types';

// üÜï –ù–û–í–´–ï IMPORTS –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
import { ExternalWalletScanner } from './ExternalWalletScanner';
import { ApiCreditManager } from './ApiCreditManager';

export class SmartWalletDiscovery {
  private smDatabase: SmartMoneyDatabase;
  private database: Database;
  private logger: Logger;
  private heliusApiKey: string;
  
  // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞
  private isDiscoveryInProgress = false;

  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
  private externalScanner?: ExternalWalletScanner;
  private creditManager?: ApiCreditManager;
  private useExternalSearch: boolean = false;

  constructor(smDatabase: SmartMoneyDatabase, database: Database) {
    this.smDatabase = smDatabase;
    this.database = database;
    this.logger = Logger.getInstance();
    this.heliusApiKey = process.env.HELIUS_API_KEY!;
    
    // üÜï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    try {
      this.creditManager = new ApiCreditManager();
      this.externalScanner = new ExternalWalletScanner(this.database, this.creditManager);
      this.useExternalSearch = true;
      this.logger.info('üåç External wallet discovery ENABLED (DexScreener + Jupiter)');
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è External wallet discovery disabled:', error);
      this.useExternalSearch = false;
    }
  }

  async discoverSmartWallets(): Promise<WalletAnalysisResult[]> {
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞
    if (this.isDiscoveryInProgress) {
      this.logger.warn('üîÑ Smart Wallet Discovery already in progress, skipping...');
      return [];
    }

    this.isDiscoveryInProgress = true;
    
    // üÜï –í–´–ë–ò–†–ê–ï–ú –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö API
    const searchType = this.useExternalSearch ? 'EXTERNAL + INTERNAL' : 'INTERNAL ONLY';
    this.logger.info(`üîç Starting Smart Wallet Discovery (${searchType})...`);

    try {
      // üî• –£–õ–£–ß–®–ï–ù–ù–û–ï: –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
      const candidateWallets = await this.findTopCandidateWalletsOptimized();
      this.logger.info(`Found ${candidateWallets.length} candidate wallets (${searchType})`);

      const results: WalletAnalysisResult[] = [];

      for (const walletAddress of candidateWallets) {
        try {
          const analysis = await this.analyzeWalletOptimized(walletAddress);
          if (analysis) {
            results.push(analysis);
          }
          
          // üî• –£–í–ï–õ–ò–ß–ï–ù–ù–ê–Ø –ü–ê–£–ó–ê –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API
          await new Promise(resolve => setTimeout(resolve, 500)); // 500ms –≤–º–µ—Å—Ç–æ 100ms
        } catch (error) {
          this.logger.error(`Error analyzing wallet ${walletAddress}:`, error);
        }
      }

      const smartMoneyCount = results.filter(r => r.isSmartMoney).length;
      this.logger.info(`‚úÖ Wallet discovery completed: ${smartMoneyCount}/${candidateWallets.length} smart money wallets found`);
      return results;

    } catch (error) {
      this.logger.error('‚ùå Error in wallet discovery:', error);
      throw error;
    } finally {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ finally –±–ª–æ–∫–µ
      this.isDiscoveryInProgress = false;
    }
  }

  // üî• –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö: –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç –≤–Ω–µ—à–Ω–∏–π –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∏—Å–∫
  private async findTopCandidateWalletsOptimized(): Promise<string[]> {
    let candidates: string[] = [];
    
    try {
      // üÜï –ü–†–ò–û–†–ò–¢–ï–¢: –í–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      if (this.useExternalSearch && this.externalScanner) {
        this.logger.info('üåç Using EXTERNAL wallet search (DexScreener + Jupiter)...');
        
        try {
          const externalCandidates = await this.externalScanner.findWalletCandidates();
          
          // –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
          const newCandidates = await this.filterExistingWallets(externalCandidates);
          
          this.logger.info(`üìä External search: ${externalCandidates.length} found, ${newCandidates.length} new`);
          candidates.push(...newCandidates);
          
          // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
          if (candidates.length >= 20) {
            return candidates.slice(0, 50); // –ë–µ—Ä–µ–º —Ç–æ–ø 50 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          }
          
        } catch (externalError) {
          this.logger.warn('‚ö†Ô∏è External search failed, falling back to internal:', externalError);
        }
      }

      // üîÑ FALLBACK: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
      this.logger.info(`üîç Using INTERNAL search (existing logic)${candidates.length > 0 ? ' as supplement' : ''}...`);
      
      const internalCandidates = await this.findInternalCandidates();
      candidates.push(...internalCandidates);

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueCandidates = [...new Set(candidates)];
      
      this.logger.info(`üéØ Combined result: ${uniqueCandidates.length} unique candidates`);
      return uniqueCandidates.slice(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

    } catch (error) {
      this.logger.error('Error finding candidate wallets:', error);
      return candidates; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á—Ç–æ —É—Å–ø–µ–ª–∏ –Ω–∞–π—Ç–∏
    }
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
  private async findInternalCandidates(): Promise<string[]> {
    const candidates: string[] = [];
    
    try {
      // üî• –û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: 1 –Ω–µ–¥–µ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ –ë–î
      const recentTransactions = await this.database.getRecentTransactions(24 * 7); // 1 –Ω–µ–¥–µ–ª—è
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–æ—à–µ–ª—å–∫–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      const walletMetrics = new Map<string, {
        totalVolume: number;
        tradeCount: number;
        uniqueTokens: Set<string>;
        avgTradeSize: number;
        maxTradeSize: number;
        lastActivity: Date;
      }>();

      for (const tx of recentTransactions) {
        const key = tx.walletAddress;
        
        if (!walletMetrics.has(key)) {
          walletMetrics.set(key, {
            totalVolume: 0,
            tradeCount: 0,
            uniqueTokens: new Set(),
            avgTradeSize: 0,
            maxTradeSize: 0,
            lastActivity: tx.timestamp
          });
        }

        const metrics = walletMetrics.get(key)!;
        metrics.totalVolume += tx.amountUSD;
        metrics.tradeCount++;
        metrics.uniqueTokens.add(tx.tokenAddress);
        metrics.maxTradeSize = Math.max(metrics.maxTradeSize, tx.amountUSD);
        
        if (tx.timestamp > metrics.lastActivity) {
          metrics.lastActivity = tx.timestamp;
        }
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –°–ú–Ø–ì–ß–ï–ù–ù–´–ï —Ñ–∏–ª—å—Ç—Ä—ã
      for (const [wallet, metrics] of walletMetrics) {
        metrics.avgTradeSize = metrics.totalVolume / metrics.tradeCount;
        
        // üî• –°–ú–Ø–ì–ß–ï–ù–ù–´–ï –ö–†–ò–¢–ï–†–ò–ò –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤
        const daysSinceActive = (Date.now() - metrics.lastActivity.getTime()) / (1000 * 60 * 60 * 24);
        
        if (
          metrics.totalVolume >= 30000 && // üî• –°–ù–ò–ñ–ï–ù–û: $30K –æ–±—ä–µ–º–∞ (–±—ã–ª–æ $100K)
          metrics.tradeCount >= 20 && // –û—Å—Ç–∞–µ—Ç—Å—è 20
          metrics.avgTradeSize >= 1500 && // üî• –°–ù–ò–ñ–ï–ù–û: $1.5K —Å—Ä–µ–¥–Ω—è—è —Å–¥–µ–ª–∫–∞ (–±—ã–ª–æ $5K)
          metrics.maxTradeSize >= 5000 && // üî• –°–ù–ò–ñ–ï–ù–û: –º–∏–Ω–∏–º—É–º –æ–¥–Ω–∞ –∫—Ä—É–ø–Ω–∞—è —Å–¥–µ–ª–∫–∞ $5K+ (–±—ã–ª–æ $25K)
          metrics.uniqueTokens.size >= 5 && // –û—Å—Ç–∞–µ—Ç—Å—è 5 —Ä–∞–∑–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
          daysSinceActive <= 7 // üî• –£–í–ï–õ–ò–ß–ï–ù–û: –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π (–±—ã–ª–æ 3)
        ) {
          candidates.push(wallet);
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Å–∫–æ—Ä—É: –æ–±—ä–µ–º + –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å + —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–æ–∫
      candidates.sort((a, b) => {
        const aMetrics = walletMetrics.get(a)!;
        const bMetrics = walletMetrics.get(b)!;
        
        // üî• –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –°–ö–û–† –¥–ª—è —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è
        const aScore = aMetrics.totalVolume * 0.4 + 
                      aMetrics.avgTradeSize * 0.3 + 
                      aMetrics.maxTradeSize * 0.2 + 
                      aMetrics.uniqueTokens.size * 1000 * 0.1;
                      
        const bScore = bMetrics.totalVolume * 0.4 + 
                      bMetrics.avgTradeSize * 0.3 + 
                      bMetrics.maxTradeSize * 0.2 + 
                      bMetrics.uniqueTokens.size * 1000 * 0.1;
        
        return bScore - aScore;
      });

      const topCandidates = candidates.slice(0, 20);
      
      this.logger.info(`üéØ Internal search: ${topCandidates.length}/20 candidates with criteria:`);
      this.logger.info(`‚Ä¢ Min volume: $30K+ ‚Ä¢ Min trades: 20+ ‚Ä¢ Min avg trade: $1.5K+`);

      return topCandidates;

    } catch (error) {
      this.logger.error('Error in internal candidate search:', error);
      return [];
    }
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
  private async filterExistingWallets(candidates: string[]): Promise<string[]> {
    const newCandidates: string[] = [];
    
    for (const candidate of candidates) {
      try {
        const existingWallet = await this.smDatabase.getSmartWallet(candidate);
        if (!existingWallet) {
          newCandidates.push(candidate);
        }
      } catch (error) {
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        newCandidates.push(candidate);
      }
    }
    
    return newCandidates;
  }

  // üî• –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–û–®–ï–õ–¨–ö–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
  private async analyzeWalletOptimized(walletAddress: string): Promise<WalletAnalysisResult | null> {
    let analysisInProgress = true;
    
    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–¥—Ä–µ—Å–∞
      if (!walletAddress || typeof walletAddress !== 'string' || walletAddress.length < 32) {
        this.logger.warn(`Invalid wallet address: ${walletAddress}`);
        return null;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ—à–µ–ª–µ–∫ —É–∂–µ Smart Money
      const existingWallet = await this.smDatabase.getSmartWallet(walletAddress);
      if (existingWallet) {
        this.logger.debug(`Wallet ${walletAddress} already exists in Smart Money database`);
        return null; // –£–∂–µ –≤ –±–∞–∑–µ
      }

      // üî• –û–ì–†–ê–ù–ò–ß–ï–ù–ù–ê–Ø –ò–°–¢–û–†–ò–Ø: –º–∞–∫—Å–∏–º—É–º 200 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–±—ã–ª–æ 500)
      const transactions = await this.database.getWalletTransactions(walletAddress, 200);
      if (transactions.length < 30) { // –°–ù–ò–ñ–ï–ù–û: 30 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–±—ã–ª–æ 50)
        return {
          address: walletAddress,
          isSmartMoney: false,
          metrics: this.getDefaultMetrics(),
          familyConnections: [], // –í—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
          disqualificationReasons: ['Insufficient transaction history (need 30+ txs)']
        };
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const metrics = await this.calculatePerformanceMetricsOptimized(transactions);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      const category = this.determineCategoryOptimized(transactions, metrics);
      
      // üî• –°–ú–Ø–ì–ß–ï–ù–ù–´–ï –∫—Ä–∏—Ç–µ—Ä–∏–∏ Smart Money
      const { isSmartMoney, disqualificationReasons } = this.evaluateSmartMoneyRelaxed(metrics);

      return {
        address: walletAddress,
        isSmartMoney,
        category,
        metrics,
        familyConnections: [], // –í—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        disqualificationReasons
      };

    } catch (error) {
      this.logger.error(`Error analyzing wallet ${walletAddress}:`, error);
      return null;
    } finally {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω finally –±–ª–æ–∫ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      analysisInProgress = false;
    }
  }

  // üî• –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢ –ú–ï–¢–†–ò–ö (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
  private async calculatePerformanceMetricsOptimized(transactions: any[]): Promise<WalletPerformanceMetrics> {
    let metricsCalculation = true;
    
    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!Array.isArray(transactions) || transactions.length === 0) {
        this.logger.warn('Invalid transactions array provided to calculatePerformanceMetricsOptimized');
        return this.getDefaultMetrics();
      }

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ PnL
      const tokenPositions = new Map<string, {
        buyTransactions: any[];
        sellTransactions: any[];
        totalBought: number;
        totalSold: number;
        realizedPnL: number;
      }>();

      // üî• –£–ü–†–û–©–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      const recentTransactions = transactions.slice(0, 100);

      for (const tx of recentTransactions) {
        // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if (!tx || !tx.tokenAddress || typeof tx.amountUSD !== 'number') {
          this.logger.debug('Skipping invalid transaction:', tx);
          continue;
        }

        const key = tx.tokenAddress;
        
        if (!tokenPositions.has(key)) {
          tokenPositions.set(key, {
            buyTransactions: [],
            sellTransactions: [],
            totalBought: 0,
            totalSold: 0,
            realizedPnL: 0
          });
        }

        const position = tokenPositions.get(key)!;
        
        if (tx.swapType === 'buy' || tx.type === 'swap_in') {
          position.buyTransactions.push(tx);
          position.totalBought += tx.amountUSD;
        } else if (tx.swapType === 'sell' || tx.type === 'swap_out') {
          position.sellTransactions.push(tx);
          position.totalSold += tx.amountUSD;
          position.realizedPnL += tx.amountUSD - (position.totalBought / Math.max(position.buyTransactions.length, 1));
        }
      }

      // –í—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      let totalPnL = 0;
      let winningTrades = 0;
      let totalCompletedTrades = 0;
      const tradeSizes: number[] = [];
      const holdTimes: number[] = [];
      let earlyEntries = 0;

      for (const position of tokenPositions.values()) {
        totalPnL += position.realizedPnL;
        
        if (position.realizedPnL > 0) winningTrades++;
        if (position.sellTransactions.length > 0) totalCompletedTrades++;
        
        tradeSizes.push(...position.buyTransactions.map(tx => tx.amountUSD));
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
        if (position.buyTransactions.length > 0 && position.sellTransactions.length > 0) {
          const avgBuyTime = position.buyTransactions.reduce((sum, tx) => sum + tx.timestamp.getTime(), 0) / position.buyTransactions.length;
          const avgSellTime = position.sellTransactions.reduce((sum, tx) => sum + tx.timestamp.getTime(), 0) / position.sellTransactions.length;
          holdTimes.push((avgSellTime - avgBuyTime) / (1000 * 60 * 60)); // —á–∞—Å—ã
        }
        
        // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–Ω–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤
        if (position.buyTransactions.length > 0 && Math.random() > 0.7) {
          earlyEntries++;
        }
      }

      const winRate = totalCompletedTrades > 0 ? (winningTrades / totalCompletedTrades) * 100 : 0;
      const avgTradeSize = tradeSizes.length > 0 ? tradeSizes.reduce((a, b) => a + b, 0) / tradeSizes.length : 0;
      const maxTradeSize = tradeSizes.length > 0 ? Math.max(...tradeSizes) : 0;
      const minTradeSize = tradeSizes.length > 0 ? Math.min(...tradeSizes) : 0;
      const avgHoldTime = holdTimes.length > 0 ? holdTimes.reduce((a, b) => a + b, 0) / holdTimes.length : 0;
      const earlyEntryRate = recentTransactions.length > 0 ? (earlyEntries / recentTransactions.length) * 100 : 0;

      // üî• –£–ü–†–û–©–ï–ù–ù–´–ï —Ä–∞—Å—á–µ—Ç—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
      const sharpeRatio = this.calculateSharpeRatioSimple(totalPnL, tradeSizes);
      const maxDrawdown = this.calculateMaxDrawdownSimple(Array.from(tokenPositions.values()));

      return {
        totalPnL,
        winRate: Math.min(100, Math.max(0, winRate)), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100%
        totalTrades: recentTransactions.length,
        avgTradeSize: Math.max(0, avgTradeSize),
        maxTradeSize: Math.max(0, maxTradeSize),
        minTradeSize: Math.max(0, minTradeSize),
        sharpeRatio,
        maxDrawdown: Math.max(0, maxDrawdown),
        profitFactor: totalPnL > 0 ? Math.abs(totalPnL) / Math.max(Math.abs(totalPnL - totalPnL), 1) : 0,
        avgHoldTime: Math.max(0, avgHoldTime),
        earlyEntryRate: Math.min(100, Math.max(0, earlyEntryRate)), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 0-100%
        recentActivity: recentTransactions.length > 0 ? recentTransactions[0].timestamp : new Date()
      };

    } catch (error) {
      this.logger.error('Error calculating performance metrics:', error);
      return this.getDefaultMetrics();
    } finally {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω finally –±–ª–æ–∫
      metricsCalculation = false;
    }
  }

  // üî• –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
  private calculateSharpeRatioSimple(totalPnL: number, tradeSizes: number[]): number {
    try {
      if (!Array.isArray(tradeSizes) || tradeSizes.length === 0) return 0;
      
      const avgReturn = totalPnL / tradeSizes.length;
      const avgSize = tradeSizes.reduce((a, b) => a + b, 0) / tradeSizes.length;
      
      return avgSize > 0 ? avgReturn / avgSize : 0;
    } catch (error) {
      this.logger.debug('Error calculating Sharpe ratio:', error);
      return 0;
    }
  }

  private calculateMaxDrawdownSimple(positions: any[]): number {
    try {
      if (!Array.isArray(positions) || positions.length === 0) return 0;
      
      // –û—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç
      let maxDrawdown = 0;
      let runningPnL = 0;
      let peak = 0;

      for (const position of positions) {
        if (position && typeof position.realizedPnL === 'number') {
          runningPnL += position.realizedPnL;
          if (runningPnL > peak) {
            peak = runningPnL;
          }
          const drawdown = peak - runningPnL;
          maxDrawdown = Math.max(maxDrawdown, drawdown);
        }
      }

      return maxDrawdown;
    } catch (error) {
      this.logger.debug('Error calculating max drawdown:', error);
      return 0;
    }
  }

  private determineCategoryOptimized(transactions: any[], metrics: WalletPerformanceMetrics): 'sniper' | 'hunter' | 'trader' | undefined {
    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!metrics || typeof metrics.earlyEntryRate !== 'number' || typeof metrics.avgHoldTime !== 'number') {
        return undefined;
      }

      // üî• –£–ü–†–û–©–ï–ù–ù–ê–Ø –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (metrics.earlyEntryRate > 35 && metrics.avgHoldTime < 8) {
        return 'sniper';
      } else if (metrics.avgHoldTime < 48 && metrics.avgHoldTime > 1) {
        return 'hunter';
      } else if (metrics.avgHoldTime >= 48 && metrics.avgTradeSize > 10000) {
        return 'trader';
      }
      
      return undefined;
    } catch (error) {
      this.logger.debug('Error determining category:', error);
      return undefined;
    }
  }

  private evaluateSmartMoneyRelaxed(metrics: WalletPerformanceMetrics): {
    isSmartMoney: boolean;
    disqualificationReasons: string[];
  } {
    const reasons: string[] = [];
    
    try {
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ—Ç—Ä–∏–∫
      if (!metrics || typeof metrics.winRate !== 'number') {
        return {
          isSmartMoney: false,
          disqualificationReasons: ['Invalid metrics data']
        };
      }
      
      // üî• –°–ú–Ø–ì–ß–ï–ù–ù–´–ï —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–æ–ª—å—à–µ–≥–æ —á–∏—Å–ª–∞ —Ç–∞–ª–∞–Ω—Ç–æ–≤
      if (metrics.winRate < 60) { // –°–ù–ò–ñ–ï–ù–û —Å 75% –¥–æ 60%
        reasons.push(`Win rate too low: ${metrics.winRate.toFixed(1)}% (required: 60%+)`);
      }
      
      if (metrics.totalPnL < 20000) { // –°–ù–ò–ñ–ï–ù–û —Å $100K –¥–æ $20K
        reasons.push(`PnL too low: $${metrics.totalPnL.toFixed(0)} (required: $20K+)`);
      }
      
      if (metrics.avgTradeSize < 1500) { // –°–ù–ò–ñ–ï–ù–û —Å $5K –¥–æ $1.5K
        reasons.push(`Average trade size too low: $${metrics.avgTradeSize.toFixed(0)} (required: $1.5K+)`);
      }
      
      if (metrics.totalTrades < 30) { // –°–ù–ò–ñ–ï–ù–û —Å 50 –¥–æ 30
        reasons.push(`Insufficient trades: ${metrics.totalTrades} (required: 30+)`);
      }

      if (metrics.maxTradeSize < 5000) { // –°–ù–ò–ñ–ï–ù–û: —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å–¥–µ–ª–∫–∞ $5K+ (–±—ã–ª–æ $20K)
        reasons.push(`No large trades: max $${metrics.maxTradeSize.toFixed(0)} (required: $5K+)`);
      }

      // üî• –°–ú–Ø–ì–ß–ï–ù–û –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: 7 –¥–Ω–µ–π (–±—ã–ª–æ 7)
      const daysSinceLastActivity = (Date.now() - metrics.recentActivity.getTime()) / (1000 * 60 * 60 * 24);
      if (daysSinceLastActivity > 7) {
        reasons.push(`Inactive for ${Math.floor(daysSinceLastActivity)} days (required: <7 days)`);
      }

      return {
        isSmartMoney: reasons.length === 0,
        disqualificationReasons: reasons
      };

    } catch (error) {
      this.logger.error('Error evaluating Smart Money criteria:', error);
      return {
        isSmartMoney: false,
        disqualificationReasons: ['Error during evaluation']
      };
    }
  }

  private getDefaultMetrics(): WalletPerformanceMetrics {
    return {
      totalPnL: 0,
      winRate: 0,
      totalTrades: 0,
      avgTradeSize: 0,
      maxTradeSize: 0,
      minTradeSize: 0,
      sharpeRatio: 0,
      maxDrawdown: 0,
      profitFactor: 0,
      avgHoldTime: 0,
      earlyEntryRate: 0,
      recentActivity: new Date()
    };
  }

  // üîß –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –°–¢–ê–¢–£–°–ê (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
  public isDiscoveryRunning(): boolean {
    return this.isDiscoveryInProgress;
  }

  public forceStopDiscovery(): void {
    this.isDiscoveryInProgress = false;
    this.logger.warn('üõë Smart Wallet Discovery force stopped');
  }

  // üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  public getDiscoveryStats(): any {
    return {
      isRunning: this.isDiscoveryInProgress,
      externalSearchEnabled: this.useExternalSearch,
      creditStats: this.creditManager?.getUsageStats() || null,
      externalScannerStats: this.externalScanner?.getStats() || null
    };
  }

  public isExternalSearchEnabled(): boolean {
    return this.useExternalSearch;
  }
}