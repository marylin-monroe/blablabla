// src/services/SmartMoneyFlowAnalyzer.ts - –ò–°–ü–†–ê–í–õ–ï–ù–û –≤—Å–µ –æ—à–∏–±–∫–∏
import { SmartMoneyDatabase } from './SmartMoneyDatabase';
import { TelegramNotifier } from './TelegramNotifier';
import { Logger } from '../utils/Logger';
import {
  TokenSwap,
  SmartMoneyFlow,
  HotNewToken,
  SmartMoneyWallet
} from '../types';

export interface FlowAnalysisResult {
  inflows: SmartMoneyFlow[];
  outflows: SmartMoneyFlow[];
  hotNewTokens: HotNewToken[];
  topInflowsLastHour: SmartMoneyFlow[];
}

export class SmartMoneyFlowAnalyzer {
  private smDatabase: SmartMoneyDatabase;
  private telegramNotifier: TelegramNotifier;
  private logger: Logger;
  private heliusApiKey: string;

  constructor(smDatabase: SmartMoneyDatabase, telegramNotifier: TelegramNotifier) {
    this.smDatabase = smDatabase;
    this.telegramNotifier = telegramNotifier;
    this.logger = Logger.getInstance();
    this.heliusApiKey = process.env.HELIUS_API_KEY!;
  }

  // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—Ç–æ–∫–æ–≤ Smart Money
  async analyzeSmartMoneyFlows(): Promise<FlowAnalysisResult> {
    this.logger.info('üîç Starting Smart Money Flow Analysis...');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ Smart Money –∫–æ—à–µ–ª—å–∫–∏
      const smartWallets = await this.smDatabase.getAllActiveSmartWallets();
      this.logger.info(`Analyzing flows for ${smartWallets.length} Smart Money wallets`);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∏ 24 —á–∞—Å–∞
      const hourlyFlows = await this.calculateFlows(smartWallets, '1h');
      const dailyFlows = await this.calculateFlows(smartWallets, '24h');

      // –ò—â–µ–º Hot New Tokens
      const hotNewTokens = await this.findHotNewTokens(smartWallets);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø –ø—Ä–∏—Ç–æ–∫–∏ –∑–∞ —á–∞—Å
      const topInflowsLastHour = hourlyFlows.inflows
        .sort((a, b) => b.totalInflowUSD - a.totalInflowUSD)
        .slice(0, 10);

      const result: FlowAnalysisResult = {
        inflows: [...hourlyFlows.inflows, ...dailyFlows.inflows],
        outflows: [...hourlyFlows.outflows, ...dailyFlows.outflows],
        hotNewTokens,
        topInflowsLastHour
      };

      this.logger.info(`‚úÖ Analysis complete: ${result.inflows.length} inflows, ${result.hotNewTokens.length} hot tokens`);
      return result;

    } catch (error) {
      this.logger.error('‚ùå Error in Smart Money Flow Analysis:', error);
      throw error;
    }
  }

  // –†–∞—Å—á–µ—Ç –ø—Ä–∏—Ç–æ–∫–æ–≤/–æ—Ç—Ç–æ–∫–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
  private async calculateFlows(
    smartWallets: SmartMoneyWallet[], 
    period: '1h' | '24h'
  ): Promise<{ inflows: SmartMoneyFlow[]; outflows: SmartMoneyFlow[] }> {
    
    const hours = period === '1h' ? 1 : 24;
    const cutoffTime = new Date(Date.now() - hours * 60 * 60 * 1000);

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
    const tokenFlows = new Map<string, {
      tokenAddress: string;
      tokenSymbol: string;
      tokenName: string;
      totalBuyUSD: number;
      totalSellUSD: number;
      uniqueBuyers: Set<string>;
      uniqueSellers: Set<string>;
      transactions: TokenSwap[];
    }>();

    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Smart Money –∫–æ—à–µ–ª—å–∫–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
    for (const wallet of smartWallets) {
      const transactions = await this.getWalletTransactionsAfter(wallet.address, cutoffTime);
      
      for (const tx of transactions) {
        const key = tx.tokenAddress;
        
        if (!tokenFlows.has(key)) {
          tokenFlows.set(key, {
            tokenAddress: tx.tokenAddress,
            tokenSymbol: tx.tokenSymbol,
            tokenName: tx.tokenName,
            totalBuyUSD: 0,
            totalSellUSD: 0,
            uniqueBuyers: new Set(),
            uniqueSellers: new Set(),
            transactions: []
          });
        }

        const flow = tokenFlows.get(key)!;
        flow.transactions.push(tx);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        if (this.isBuyTransaction(tx)) {
          flow.totalBuyUSD += tx.amountUSD;
          flow.uniqueBuyers.add(tx.walletAddress);
        } else {
          flow.totalSellUSD += tx.amountUSD;
          flow.uniqueSellers.add(tx.walletAddress);
        }
      }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ SmartMoneyFlow –æ–±—ä–µ–∫—Ç—ã
    const inflows: SmartMoneyFlow[] = [];
    const outflows: SmartMoneyFlow[] = [];

    for (const [_, flow] of tokenFlows) {
      const netFlowUSD = flow.totalBuyUSD - flow.totalSellUSD;
      const uniqueWallets = flow.uniqueBuyers.size + flow.uniqueSellers.size;

      if (uniqueWallets < 2) continue; // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã —Å –º–∞–ª–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é

      const smartMoneyFlow: SmartMoneyFlow = {
        tokenAddress: flow.tokenAddress,
        tokenSymbol: flow.tokenSymbol,
        tokenName: flow.tokenName,
        period,
        totalInflowUSD: flow.totalBuyUSD,
        totalOutflowUSD: flow.totalSellUSD,
        netFlowUSD,
        uniqueWallets,
        avgTradeSize: (flow.totalBuyUSD + flow.totalSellUSD) / flow.transactions.length,
        topWallets: this.getTopWallets(flow.transactions)
      };

      if (netFlowUSD > 0 && flow.totalBuyUSD > 5000) { // –ú–∏–Ω–∏–º—É–º $5K –¥–ª—è inflow
        inflows.push(smartMoneyFlow);
      } else if (netFlowUSD < 0 && flow.totalSellUSD > 5000) {
        outflows.push(smartMoneyFlow);
      }
    }

    return {
      inflows: inflows.sort((a, b) => b.netFlowUSD - a.netFlowUSD),
      outflows: outflows.sort((a, b) => a.netFlowUSD - b.netFlowUSD)
    };
  }

  // –ü–æ–∏—Å–∫ Hot New Tokens
  private async findHotNewTokens(smartWallets: SmartMoneyWallet[]): Promise<HotNewToken[]> {
    const last24Hours = new Date(Date.now() - 24 * 60 * 60 * 1000);
    const hotTokens = new Map<string, {
      tokenAddress: string;
      tokenSymbol: string;
      tokenName: string;
      fdv: number;
      smStakeUSD: number;
      ageHours: number;
      buyVolumeUSD: number;
      sellVolumeUSD: number;
      buyCount: number;
      sellCount: number;
      uniqueSmWallets: Set<string>;
      topBuyers: Array<{ address: string; amountUSD: number; category: string; }>;
    }>();

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    for (const wallet of smartWallets) {
      const transactions = await this.getWalletTransactionsAfter(wallet.address, last24Hours);
      
      for (const tx of transactions) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
        const tokenAge = await this.getTokenAge(tx.tokenAddress);
        if (tokenAge > 24) continue; // –¢–æ–ª—å–∫–æ —Ç–æ–∫–µ–Ω—ã –º–ª–∞–¥—à–µ 24 —á–∞—Å–æ–≤

        const key = tx.tokenAddress;
        
        if (!hotTokens.has(key)) {
          const fdv = await this.getTokenFDV(tx.tokenAddress);
          hotTokens.set(key, {
            tokenAddress: tx.tokenAddress,
            tokenSymbol: tx.tokenSymbol,
            tokenName: tx.tokenName,
            fdv,
            smStakeUSD: 0,
            ageHours: tokenAge,
            buyVolumeUSD: 0,
            sellVolumeUSD: 0,
            buyCount: 0,
            sellCount: 0,
            uniqueSmWallets: new Set(),
            topBuyers: []
          });
        }

        const hotToken = hotTokens.get(key)!;
        hotToken.uniqueSmWallets.add(tx.walletAddress);

        if (this.isBuyTransaction(tx)) {
          hotToken.buyVolumeUSD += tx.amountUSD;
          hotToken.buyCount++;
          hotToken.smStakeUSD += tx.amountUSD;
          
          hotToken.topBuyers.push({
            address: tx.walletAddress,
            amountUSD: tx.amountUSD,
            category: this.getWalletCategory(wallet)
          });
        } else {
          hotToken.sellVolumeUSD += tx.amountUSD;
          hotToken.sellCount++;
        }
      }
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º Hot New Tokens
    const result: HotNewToken[] = [];
    
    for (const [_, token] of hotTokens) {
      if (token.uniqueSmWallets.size >= 3 && token.smStakeUSD >= 10000) { // –ú–∏–Ω–∏–º—É–º 3 SM –∫–æ—à–µ–ª—å–∫–∞ –∏ $10K
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ø –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
        token.topBuyers.sort((a, b) => b.amountUSD - a.amountUSD);
        token.topBuyers = token.topBuyers.slice(0, 5);

        result.push({
          address: token.tokenAddress,
          symbol: token.tokenSymbol,
          name: token.tokenName,
          fdv: token.fdv,
          smStakeUSD: token.smStakeUSD,
          ageHours: token.ageHours,
          buyVolumeUSD: token.buyVolumeUSD,
          sellVolumeUSD: token.sellVolumeUSD,
          buyCount: token.buyCount,
          sellCount: token.sellCount,
          uniqueSmWallets: token.uniqueSmWallets.size,
          topBuyers: token.topBuyers
        });
      }
    }

    return result.sort((a, b) => b.smStakeUSD - a.smStakeUSD);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∞–Ω–∞–ª–∏–∑–∞
  async sendFlowAnalysisNotifications(result: FlowAnalysisResult): Promise<void> {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø –ø—Ä–∏—Ç–æ–∫–∏ –∑–∞ —á–∞—Å
      if (result.topInflowsLastHour.length > 0) {
        await this.telegramNotifier.sendTopSmartMoneyInflows(result.topInflowsLastHour);
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Hot New Tokens
      for (const hotToken of result.hotNewTokens.slice(0, 5)) { // –¢–æ–ø-5
        await this.telegramNotifier.sendHotNewTokenAlert(hotToken);
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
      }

      this.logger.info(`‚úÖ Sent notifications: ${result.topInflowsLastHour.length} inflows, ${result.hotNewTokens.length} hot tokens`);

    } catch (error) {
      this.logger.error('‚ùå Error sending flow analysis notifications:', error);
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private async getWalletTransactionsAfter(walletAddress: string, afterDate: Date): Promise<TokenSwap[]> {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞ –º–µ—Ç–æ–¥ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ SmartMoneyDatabase
      // –í –±—É–¥—É—â–µ–º: const transactions = await this.smDatabase.getSmartWalletTransactions(walletAddress, afterDate);
      return [];
    } catch (error) {
      this.logger.error(`Error getting transactions for wallet ${walletAddress}:`, error);
      return [];
    }
  }

  private isBuyTransaction(tx: TokenSwap): boolean {
    // –ï—Å–ª–∏ swapType —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (tx.swapType) {
      return tx.swapType === 'buy';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –ª–æ–≥–∏–∫–µ: –µ—Å–ª–∏ –µ—Å—Ç—å pnl –∏ –æ–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –±—ã–ª–∞ –ø–æ–∫—É–ø–∫–∞
    if (tx.pnl !== undefined && tx.pnl > 0) {
      return true;
    }
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø–æ–∫—É–ø–∫–æ–π
  }

  private getTopWallets(transactions: TokenSwap[]): Array<{ address: string; amountUSD: number; category: string; }> {
    const walletVolumes = new Map<string, number>();
    
    for (const tx of transactions) {
      const current = walletVolumes.get(tx.walletAddress) || 0;
      walletVolumes.set(tx.walletAddress, current + tx.amountUSD);
    }

    return Array.from(walletVolumes.entries())
      .map(([address, amountUSD]) => ({
        address,
        amountUSD,
        category: 'Smart Money' // –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      }))
      .sort((a, b) => b.amountUSD - a.amountUSD)
      .slice(0, 5);
  }

  private async getTokenAge(tokenAddress: string): Promise<number> {
    try {
      // –ó–∞–ø—Ä–æ—Å –∫ Helius API –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–µ
      const response = await fetch(`https://api.helius.xyz/v0/addresses/${tokenAddress}/transactions?api-key=${this.heliusApiKey}&limit=100&type=UNKNOWN`);
      
      if (response.ok) {
        const data = await response.json();
        if (Array.isArray(data) && data.length > 0) {
          // –ò—â–µ–º —Å–∞–º—É—é —Ä–∞–Ω–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞)
          const oldestTx = data[data.length - 1]; // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤ —Å–ø–∏—Å–∫–µ = —Å–∞–º–∞—è —Å—Ç–∞—Ä–∞—è
          const createdAt = new Date(oldestTx.timestamp * 1000);
          const ageMs = Date.now() - createdAt.getTime();
          return ageMs / (1000 * 60 * 60); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —á–∞—Å–∞—Ö
        }
      }
      
      // Fallback: —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º (1 —á–∞—Å)
      return 1;
    } catch (error) {
      this.logger.error(`Error getting token age for ${tokenAddress}:`, error);
      return 1; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    }
  }

  private async getTokenFDV(tokenAddress: string): Promise<number> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞
      const metadataResponse = await fetch(`https://api.helius.xyz/v0/tokens/metadata?api-key=${this.heliusApiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mintAccounts: [tokenAddress]
        })
      });

      if (metadataResponse.ok) {
        const metadataData = await metadataResponse.json();
        if (Array.isArray(metadataData) && metadataData.length > 0) {
          const tokenData = metadataData[0];
          
          // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —á–µ—Ä–µ–∑ DexScreener API
          const priceResponse = await fetch(`https://api.dexscreener.com/latest/dex/tokens/${tokenAddress}`);
          if (priceResponse.ok) {
            const priceData = await priceResponse.json() as any;
            if (priceData.pairs && priceData.pairs.length > 0) {
              const price = parseFloat(priceData.pairs[0].priceUsd || '0');
              const supply = tokenData.onChainMetadata?.metadata?.supply || 1000000000; // Default supply
              return price * supply;
            }
          }
        }
      }

      // Fallback: —Å—Ä–µ–¥–Ω–∏–π FDV –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
      return 100000; // $100K –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } catch (error) {
      this.logger.error(`Error getting token FDV for ${tokenAddress}:`, error);
      return 100000;
    }
  }

  private getWalletCategory(wallet: SmartMoneyWallet): string {
    return wallet.category === 'sniper' ? 'Sniper' :
           wallet.category === 'hunter' ? 'Hunter' : 'Trader';
  }
}