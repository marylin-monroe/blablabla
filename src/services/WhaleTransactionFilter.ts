// src/services/WhaleTransactionFilter.ts
import { Logger } from '../utils/Logger';
import axios from 'axios';

interface WhaleFilterCriteria {
  minAmountUSD: number;
  maxTransactionAge: number; // –≤ –º–∏–Ω—É—Ç–∞—Ö
  excludeTokenCreators: boolean;
  excludeTopHolders: boolean;
  maxTopHolderPercentage: number;
  minTokenAge: number; // –≤ —á–∞—Å–∞—Ö
  minTokenLiquidity: number;
  excludeRelatedWallets: boolean;
  maxRelatedWallets: number;
}

interface ValidationRequest {
  walletAddress: string;
  tokenAddress: string;
  amountUSD: number;
  timestamp: Date;
  swapType: 'buy' | 'sell';
}

interface ValidationResult {
  isValid: boolean;
  validationScore: number; // 0-100
  reason?: string;
  riskFlags: string[];
  details?: {
    isTokenCreator?: boolean;
    isTopHolder?: boolean;
    holdingPercentage?: number;
    tokenAge?: number;
    tokenLiquidity?: number;
    relatedWallets?: number;
  };
}

interface TokenInfo {
  age: number; // –≤ —á–∞—Å–∞—Ö
  liquidity: number;
  marketCap: number;
  holders: number;
  isCreatorKnown: boolean;
  creatorAddress?: string;
}

interface WalletAnalysis {
  isTokenCreator: boolean;
  isTopHolder: boolean;
  holdingPercentage: number;
  relatedWallets: string[];
  riskScore: number;
}

export class WhaleTransactionFilter {
  private logger: Logger;
  private criteria: WhaleFilterCriteria;

  // –ö–µ—à–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  private tokenInfoCache = new Map<string, { info: TokenInfo; timestamp: number }>();
  private walletAnalysisCache = new Map<string, { analysis: WalletAnalysis; timestamp: number }>();
  private relatedWalletsCache = new Map<string, { wallets: string[]; timestamp: number }>();

  // Whitelist –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–æ—à–µ–ª—å–∫–æ–≤
  private trustedTokens = new Set<string>();
  private trustedWallets = new Set<string>();
  private knownScamTokens = new Set<string>();

  constructor() {
    this.logger = Logger.getInstance();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    this.criteria = {
      minAmountUSD: 2_000_000, // $2M+
      maxTransactionAge: 10, // 10 –º–∏–Ω—É—Ç
      excludeTokenCreators: true,
      excludeTopHolders: true,
      maxTopHolderPercentage: 20, // >20% –æ—Ç supply
      minTokenAge: 6, // 6 —á–∞—Å–æ–≤
      minTokenLiquidity: 100_000, // $100K
      excludeRelatedWallets: true,
      maxRelatedWallets: 3 // –ú–∞–∫—Å–∏–º—É–º 3 —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞
    };

    this.initializeTrustedLists();
    this.logger.info('üõ°Ô∏è Whale Transaction Filter initialized with anti-spam protection');
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∏—Ç–∞
   */
  async validateWhaleTransaction(request: ValidationRequest): Promise<ValidationResult> {
    try {
      const riskFlags: string[] = [];
      let validationScore = 100;
      let details: any = {};

      // –£—Ä–æ–≤–µ–Ω—å 1: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const basicValidation = this.performBasicValidation(request);
      if (!basicValidation.isValid) {
        return basicValidation;
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ whitelist/blacklist
      if (this.trustedTokens.has(request.tokenAddress)) {
        validationScore += 10; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        riskFlags.push('TRUSTED_TOKEN');
      }

      if (this.trustedWallets.has(request.walletAddress)) {
        validationScore += 15; // –ë–æ–Ω—É—Å –∑–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–æ—à–µ–ª–µ–∫
        riskFlags.push('TRUSTED_WALLET');
      }

      if (this.knownScamTokens.has(request.tokenAddress)) {
        return {
          isValid: false,
          validationScore: 0,
          reason: 'Known scam token',
          riskFlags: ['KNOWN_SCAM']
        };
      }

      // –£—Ä–æ–≤–µ–Ω—å 2: –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞
      const tokenInfo = await this.getTokenInfo(request.tokenAddress);
      details.tokenAge = tokenInfo.age;
      details.tokenLiquidity = tokenInfo.liquidity;

      if (tokenInfo.age < this.criteria.minTokenAge) {
        validationScore -= 25;
        riskFlags.push('NEW_TOKEN');
      }

      if (tokenInfo.liquidity < this.criteria.minTokenLiquidity) {
        validationScore -= 15;
        riskFlags.push('LOW_LIQUIDITY');
      }

      // –£—Ä–æ–≤–µ–Ω—å 3: –ê–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–∞
      const walletAnalysis = await this.analyzeWallet(request.walletAddress, request.tokenAddress);
      details.isTokenCreator = walletAnalysis.isTokenCreator;
      details.isTopHolder = walletAnalysis.isTopHolder;
      details.holdingPercentage = walletAnalysis.holdingPercentage;

      if (this.criteria.excludeTokenCreators && walletAnalysis.isTokenCreator) {
        return {
          isValid: false,
          validationScore: 0,
          reason: 'Wallet is token creator',
          riskFlags: ['TOKEN_CREATOR'],
          details
        };
      }

      if (this.criteria.excludeTopHolders && walletAnalysis.isTopHolder) {
        if (walletAnalysis.holdingPercentage > this.criteria.maxTopHolderPercentage) {
          return {
            isValid: false,
            validationScore: 0,
            reason: `Top holder with ${walletAnalysis.holdingPercentage.toFixed(1)}% supply`,
            riskFlags: ['TOP_HOLDER'],
            details
          };
        } else {
          validationScore -= 20;
          riskFlags.push('LARGE_HOLDER');
        }
      }

      // –£—Ä–æ–≤–µ–Ω—å 4: –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
      const relatedWallets = await this.findRelatedWallets(request.walletAddress, request.tokenAddress);
      details.relatedWallets = relatedWallets.length;

      if (this.criteria.excludeRelatedWallets && relatedWallets.length > this.criteria.maxRelatedWallets) {
        validationScore -= 30;
        riskFlags.push('COORDINATED_ACTIVITY');
      }

      // –£—Ä–æ–≤–µ–Ω—å 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ wash trading
      const washTradingScore = await this.detectWashTrading(request.walletAddress, request.tokenAddress);
      if (washTradingScore > 70) {
        validationScore -= 40;
        riskFlags.push('WASH_TRADING');
      }

      // –£—Ä–æ–≤–µ–Ω—å 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const suspiciousTiming = await this.checkSuspiciousTiming(request.walletAddress, request.tokenAddress, request.timestamp);
      if (suspiciousTiming) {
        validationScore -= 15;
        riskFlags.push('SUSPICIOUS_TIMING');
      }

      // –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
      validationScore = Math.max(0, Math.min(100, validationScore));
      const isValid = validationScore >= 50 && !riskFlags.includes('TOKEN_CREATOR') && !riskFlags.includes('KNOWN_SCAM');

      return {
        isValid,
        validationScore,
        riskFlags,
        details
      };

    } catch (error) {
      this.logger.error('‚ùå Error validating whale transaction:', error);
      return {
        isValid: false,
        validationScore: 0,
        reason: 'Validation error',
        riskFlags: ['VALIDATION_ERROR']
      };
    }
  }

  /**
   * –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
   */
  private performBasicValidation(request: ValidationRequest): ValidationResult {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã
    if (request.amountUSD < this.criteria.minAmountUSD) {
      return {
        isValid: false,
        validationScore: 0,
        reason: `Amount too small: $${request.amountUSD.toFixed(0)}`,
        riskFlags: ['AMOUNT_TOO_SMALL']
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const ageMinutes = (Date.now() - request.timestamp.getTime()) / (1000 * 60);
    if (ageMinutes > this.criteria.maxTransactionAge) {
      return {
        isValid: false,
        validationScore: 0,
        reason: `Transaction too old: ${ageMinutes.toFixed(1)} minutes`,
        riskFlags: ['TRANSACTION_TOO_OLD']
      };
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
    if (!this.isValidSolanaAddress(request.walletAddress) || !this.isValidSolanaAddress(request.tokenAddress)) {
      return {
        isValid: false,
        validationScore: 0,
        reason: 'Invalid Solana address',
        riskFlags: ['INVALID_ADDRESS']
      };
    }

    return { isValid: true, validationScore: 100, riskFlags: [] };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
   */
  private async getTokenInfo(tokenAddress: string): Promise<TokenInfo> {
    const cached = this.tokenInfoCache.get(tokenAddress);
    if (cached && Date.now() - cached.timestamp < 30 * 60 * 1000) { // 30 –º–∏–Ω—É—Ç –∫–µ—à
      return cached.info;
    }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º DexScreener –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ
      const response = await axios.get(`https://api.dexscreener.com/latest/dex/tokens/${tokenAddress}`, {
        timeout: 5000
      });

      if (response.data && response.data.pairs && response.data.pairs.length > 0) {
        const pair = response.data.pairs[0];
        const now = Date.now();
        const createdAt = pair.pairCreatedAt ? pair.pairCreatedAt * 1000 : now;
        const age = (now - createdAt) / (1000 * 60 * 60); // –≤ —á–∞—Å–∞—Ö

        const tokenInfo: TokenInfo = {
          age,
          liquidity: parseFloat(pair.liquidity?.usd || '0'),
          marketCap: parseFloat(pair.marketCap || '0'),
          holders: 0, // DexScreener –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ö–æ–ª–¥–µ—Ä–∞—Ö
          isCreatorKnown: false,
          creatorAddress: undefined
        };

        this.tokenInfoCache.set(tokenAddress, {
          info: tokenInfo,
          timestamp: Date.now()
        });

        return tokenInfo;
      }

    } catch (error) {
      this.logger.debug(`‚ùå Error getting token info for ${tokenAddress}:`, error);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    return {
      age: 0,
      liquidity: 0,
      marketCap: 0,
      holders: 0,
      isCreatorKnown: false
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–∞
   */
  private async analyzeWallet(walletAddress: string, tokenAddress: string): Promise<WalletAnalysis> {
    const cacheKey = `${walletAddress}-${tokenAddress}`;
    const cached = this.walletAnalysisCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < 15 * 60 * 1000) { // 15 –º–∏–Ω—É—Ç –∫–µ—à
      return cached.analysis;
    }

    try {
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–∞ —á–µ—Ä–µ–∑ RPC
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É
      const analysis: WalletAnalysis = {
        isTokenCreator: false,
        isTopHolder: false,
        holdingPercentage: 0,
        relatedWallets: [],
        riskScore: 0
      };

      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –≤—ã–∑–æ–≤ RPC –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
      // 1. –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Ç–æ–∫–µ–Ω–∞
      // 2. –ü—Ä–æ—Ü–µ–Ω—Ç –≤–ª–∞–¥–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–º
      // 3. –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      // 4. –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏

      this.walletAnalysisCache.set(cacheKey, {
        analysis,
        timestamp: Date.now()
      });

      return analysis;

    } catch (error) {
      this.logger.debug(`‚ùå Error analyzing wallet ${walletAddress}:`, error);
      return {
        isTokenCreator: false,
        isTopHolder: false,
        holdingPercentage: 0,
        relatedWallets: [],
        riskScore: 0
      };
    }
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
   */
  private async findRelatedWallets(walletAddress: string, tokenAddress: string): Promise<string[]> {
    const cacheKey = `${walletAddress}-${tokenAddress}`;
    const cached = this.relatedWalletsCache.get(cacheKey);
    if (cached && Date.now() - cached.timestamp < 20 * 60 * 1000) { // 20 –º–∏–Ω—É—Ç –∫–µ—à
      return cached.wallets;
    }

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑:
      // 1. –ö–æ—à–µ–ª—å–∫–∏ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      // 2. –ö–æ—à–µ–ª—å–∫–∏ —Å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
      // 3. –ö–æ—à–µ–ª—å–∫–∏ —Å –æ–±—â–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏ –≤ –±–æ–ª—å—à–∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞—Ö
      
      const relatedWallets: string[] = [];

      this.relatedWalletsCache.set(cacheKey, {
        wallets: relatedWallets,
        timestamp: Date.now()
      });

      return relatedWallets;

    } catch (error) {
      this.logger.debug(`‚ùå Error finding related wallets for ${walletAddress}:`, error);
      return [];
    }
  }

  /**
   * –î–µ—Ç–µ–∫—Ü–∏—è wash trading
   */
  private async detectWashTrading(walletAddress: string, tokenAddress: string): Promise<number> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –±—ã:
      // 1. –ú–Ω–æ–≥–æ –º–µ–ª–∫–∏—Ö –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
      // 2. –ö—Ä—É–≥–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ–∂–¥—É —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫–æ—à–µ–ª—å–∫–∞–º–∏  
      // 3. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–º–∞
      
      return 0; // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 (–Ω–µ—Ç wash trading)

    } catch (error) {
      this.logger.debug(`‚ùå Error detecting wash trading for ${walletAddress}:`, error);
      return 0;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º–∏–Ω–≥–∞
   */
  private async checkSuspiciousTiming(walletAddress: string, tokenAddress: string, timestamp: Date): Promise<boolean> {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä—è–ª–∏ –±—ã:
      // 1. –ü–æ–∫—É–ø–∫–∞ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
      // 2. –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ—à–µ–ª—å–∫–æ–≤
      // 3. –ü–æ–∫—É–ø–∫–∏ –ø–µ—Ä–µ–¥ –∫—Ä—É–ø–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏/–ª–∏—Å—Ç–∏–Ω–≥–∞–º–∏
      
      return false; // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false

    } catch (error) {
      this.logger.debug(`‚ùå Error checking suspicious timing for ${walletAddress}:`, error);
      return false;
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è whitelist/blacklist
   */
  private initializeTrustedLists(): void {
    // –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã (–æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã)
    this.trustedTokens.add('So11111111111111111111111111111111111111112'); // WSOL
    this.trustedTokens.add('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'); // USDC
    this.trustedTokens.add('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'); // USDT
    this.trustedTokens.add('mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So'); // mSOL

    // –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±–∏—Ä–∂–∏, —Ñ–æ–Ω–¥—ã –∏ —Ç.–¥.)
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –∑–∞–≥—Ä—É–∂–∞–ª–æ—Å—å –±—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    this.logger.info(`üõ°Ô∏è Initialized trusted lists: ${this.trustedTokens.size} tokens, ${this.trustedWallets.size} wallets`);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   */
  updateCriteria(newCriteria: Partial<WhaleFilterCriteria>): void {
    this.criteria = { ...this.criteria, ...newCriteria };
    this.logger.info('‚öôÔ∏è Updated whale filter criteria:', newCriteria);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ whitelist
   */
  addTrustedToken(tokenAddress: string): void {
    this.trustedTokens.add(tokenAddress);
    this.logger.info(`‚úÖ Added trusted token: ${tokenAddress}`);
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ blacklist
   */
  addScamToken(tokenAddress: string): void {
    this.knownScamTokens.add(tokenAddress);
    this.logger.info(`üö´ Added scam token: ${tokenAddress}`);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞
   */
  getStats(): {
    criteria: WhaleFilterCriteria;
    cacheStats: {
      tokenInfo: number;
      walletAnalysis: number;
      relatedWallets: number;
    };
    trustedLists: {
      tokens: number;
      wallets: number;
      scamTokens: number;
    };
  } {
    return {
      criteria: this.criteria,
      cacheStats: {
        tokenInfo: this.tokenInfoCache.size,
        walletAnalysis: this.walletAnalysisCache.size,
        relatedWallets: this.relatedWalletsCache.size
      },
      trustedLists: {
        tokens: this.trustedTokens.size,
        wallets: this.trustedWallets.size,
        scamTokens: this.knownScamTokens.size
      }
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–µ—à–µ–π
   */
  clearExpiredCaches(): void {
    const now = Date.now();
    
    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Ç–æ–∫–µ–Ω–æ–≤ (TTL: 30 –º–∏–Ω—É—Ç)
    for (const [key, value] of this.tokenInfoCache) {
      if (now - value.timestamp > 30 * 60 * 1000) {
        this.tokenInfoCache.delete(key);
      }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ (TTL: 15 –º–∏–Ω—É—Ç)
    for (const [key, value] of this.walletAnalysisCache) {
      if (now - value.timestamp > 15 * 60 * 1000) {
        this.walletAnalysisCache.delete(key);
      }
    }

    // –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤ (TTL: 20 –º–∏–Ω—É—Ç)
    for (const [key, value] of this.relatedWalletsCache) {
      if (now - value.timestamp > 20 * 60 * 1000) {
        this.relatedWalletsCache.delete(key);
      }
    }

    this.logger.debug('üßπ Cleared expired caches');
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  private isValidSolanaAddress(address: string): boolean {
    return /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address);
  }
}