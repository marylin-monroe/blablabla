// src/services/ApiCreditManager.ts
import { Logger } from '../utils/Logger';

interface ProviderStats {
  dailyUsage: number;
  hourlyUsage: number;
  totalUsage: number;
  lastReset: Date;
  isAvailable: boolean;
  errorCount: number;
}

interface CreditUsage {
  provider: 'quicknode' | 'alchemy';
  operation: string;
  credits: number;
  timestamp: Date;
  success: boolean;
}

export class ApiCreditManager {
  private logger: Logger;
  private currentProvider: 'quicknode' | 'alchemy';
  private providers: Map<string, ProviderStats>;
  private usageHistory: CreditUsage[] = [];
  
  // Credit limits
  private readonly DAILY_LIMIT = 666000; // 20M / 30 days
  private readonly HOURLY_LIMIT = 27000; // Daily / 24 hours
  private readonly MONTHLY_LIMIT = 20000000; // 20M total
  
  // Operation costs (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö)
  private readonly OPERATION_COSTS = {
    'balance_check': 1,
    'transaction_list': 50,
    'transaction_detail': 1,
    'wallet_analysis': 250, // Full analysis
    'quick_activity_check': 2,
    'token_balance': 1,
    'nft_balance': 2,
    'performance_calculation': 150,
  };

  constructor() {
    this.logger = Logger.getInstance();
    this.currentProvider = this.selectInitialProvider();
    this.providers = new Map();
    
    // Initialize provider stats
    this.initializeProviders();
    
    // Setup daily reset
    this.setupDailyReset();
    
    this.logger.info(`üí≥ API Credit Manager initialized with provider: ${this.currentProvider}`);
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  selectProvider(): 'quicknode' | 'alchemy' {
    const quicknodeStats = this.providers.get('quicknode')!;
    const alchemyStats = this.providers.get('alchemy')!;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    if (!quicknodeStats.isAvailable && alchemyStats.isAvailable) {
      this.currentProvider = 'alchemy';
    } else if (quicknodeStats.isAvailable && !alchemyStats.isAvailable) {
      this.currentProvider = 'quicknode';
    } else if (quicknodeStats.isAvailable && alchemyStats.isAvailable) {
      // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –º–µ–Ω—å—à–∏–º hourly usage
      this.currentProvider = quicknodeStats.hourlyUsage <= alchemyStats.hourlyUsage 
        ? 'quicknode' 
        : 'alchemy';
    } else {
      // –ï—Å–ª–∏ –æ–±–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –±–µ—Ä–µ–º quicknode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      this.currentProvider = 'quicknode';
      this.logger.warn('‚ö†Ô∏è Both providers unavailable, using quicknode as fallback');
    }
    
    return this.currentProvider;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ–º –ª–∏ –º—ã –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –æ–ø–µ—Ä–∞—Ü–∏—é
   */
  canAffordOperation(operation: string, count: number = 1): boolean {
    const cost = this.getOperationCost(operation) * count;
    const currentStats = this.providers.get(this.currentProvider)!;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
    const wouldExceedHourly = currentStats.hourlyUsage + cost > this.HOURLY_LIMIT;
    const wouldExceedDaily = currentStats.dailyUsage + cost > this.DAILY_LIMIT;
    
    if (wouldExceedHourly || wouldExceedDaily) {
      this.logger.warn(`üí∏ Cannot afford ${operation} x${count} (${cost} credits)`);
      this.logger.warn(`Current usage: ${currentStats.hourlyUsage}/${this.HOURLY_LIMIT} hourly, ${currentStats.dailyUsage}/${this.DAILY_LIMIT} daily`);
      return false;
    }
    
    return true;
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤
   */
  logUsage(operation: string, count: number = 1, success: boolean = true): void {
    const credits = this.getOperationCost(operation) * count;
    const currentStats = this.providers.get(this.currentProvider)!;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    currentStats.dailyUsage += credits;
    currentStats.hourlyUsage += credits;
    currentStats.totalUsage += credits;
    
    if (!success) {
      currentStats.errorCount++;
    }
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.usageHistory.push({
      provider: this.currentProvider,
      operation,
      credits,
      timestamp: new Date(),
      success
    });
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π)
    if (this.usageHistory.length > 1000) {
      this.usageHistory = this.usageHistory.slice(-1000);
    }
    
    this.logger.debug(`üí≥ Logged ${credits} credits for ${operation} on ${this.currentProvider} (success: ${success})`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö
   */
  getOperationCost(operation: string): number {
    return this.OPERATION_COSTS[operation as keyof typeof this.OPERATION_COSTS] || 1;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getUsageStats(): {
    currentProvider: string;
    providers: Record<string, ProviderStats>;
    totalCreditsToday: number;
    remainingCreditsToday: number;
    hourlyRate: number;
    projectedDailyUsage: number;
  } {
    const quicknodeStats = this.providers.get('quicknode')!;
    const alchemyStats = this.providers.get('alchemy')!;
    const totalCreditsToday = quicknodeStats.dailyUsage + alchemyStats.dailyUsage;
    
    return {
      currentProvider: this.currentProvider,
      providers: {
        quicknode: { ...quicknodeStats },
        alchemy: { ...alchemyStats }
      },
      totalCreditsToday,
      remainingCreditsToday: this.DAILY_LIMIT - totalCreditsToday,
      hourlyRate: quicknodeStats.hourlyUsage + alchemyStats.hourlyUsage,
      projectedDailyUsage: (quicknodeStats.hourlyUsage + alchemyStats.hourlyUsage) * 24
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  estimateWalletAnalysisCost(): number {
    return this.getOperationCost('wallet_analysis');
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—à–µ–ª—å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
   */
  getMaxWalletsForAnalysis(): number {
    const currentStats = this.providers.get(this.currentProvider)!;
    const remainingHourlyCredits = this.HOURLY_LIMIT - currentStats.hourlyUsage;
    const costPerWallet = this.estimateWalletAnalysisCost();
    
    return Math.floor(remainingHourlyCredits / costPerWallet);
  }

  /**
   * –ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
   */
  markProviderUnavailable(provider: 'quicknode' | 'alchemy', reason: string): void {
    const stats = this.providers.get(provider)!;
    stats.isAvailable = false;
    stats.errorCount++;
    
    this.logger.warn(`‚ùå Provider ${provider} marked unavailable: ${reason}`);
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if (provider === this.currentProvider) {
      this.selectProvider();
      this.logger.info(`üîÑ Switched to provider: ${this.currentProvider}`);
    }
  }

  /**
   * –ü–æ–º–µ—á–∞–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–∞–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
   */
  markProviderAvailable(provider: 'quicknode' | 'alchemy'): void {
    const stats = this.providers.get(provider)!;
    stats.isAvailable = true;
    
    this.logger.info(`‚úÖ Provider ${provider} marked available`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
   */
  getDetailedReport(): string {
    const stats = this.getUsageStats();
    const recentUsage = this.usageHistory.slice(-10);
    
    let report = 'üìä API Credit Usage Report\n\n';
    report += `Current Provider: ${stats.currentProvider}\n`;
    report += `Total Credits Today: ${stats.totalCreditsToday.toLocaleString()}\n`;
    report += `Remaining Today: ${stats.remainingCreditsToday.toLocaleString()}\n`;
    report += `Hourly Rate: ${stats.hourlyRate.toLocaleString()}\n`;
    report += `Projected Daily: ${stats.projectedDailyUsage.toLocaleString()}\n\n`;
    
    report += 'Provider Details:\n';
    for (const [name, providerStats] of Object.entries(stats.providers)) {
      report += `  ${name.toUpperCase()}:\n`;
      report += `    Daily: ${providerStats.dailyUsage.toLocaleString()}\n`;
      report += `    Hourly: ${providerStats.hourlyUsage.toLocaleString()}\n`;
      report += `    Available: ${providerStats.isAvailable ? '‚úÖ' : '‚ùå'}\n`;
      report += `    Errors: ${providerStats.errorCount}\n\n`;
    }
    
    if (recentUsage.length > 0) {
      report += 'Recent Operations:\n';
      recentUsage.forEach(usage => {
        const time = usage.timestamp.toLocaleTimeString();
        const status = usage.success ? '‚úÖ' : '‚ùå';
        report += `  ${time} ${status} ${usage.operation} (${usage.credits} credits) - ${usage.provider}\n`;
      });
    }
    
    return report;
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  resetHourlyStats(): void {
    for (const stats of this.providers.values()) {
      stats.hourlyUsage = 0;
    }
    this.logger.info('üîÑ Hourly stats reset');
  }

  /**
   * –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
   */
  resetDailyStats(): void {
    for (const stats of this.providers.values()) {
      stats.dailyUsage = 0;
      stats.hourlyUsage = 0;
      stats.errorCount = 0;
      stats.lastReset = new Date();
    }
    this.logger.info('üîÑ Daily stats reset');
  }

  private initializeProviders(): void {
    this.providers.set('quicknode', {
      dailyUsage: 0,
      hourlyUsage: 0,
      totalUsage: 0,
      lastReset: new Date(),
      isAvailable: true,
      errorCount: 0
    });
    
    this.providers.set('alchemy', {
      dailyUsage: 0,
      hourlyUsage: 0,
      totalUsage: 0,
      lastReset: new Date(),
      isAvailable: true,
      errorCount: 0
    });
  }

  private selectInitialProvider(): 'quicknode' | 'alchemy' {
    // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Å–∞ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    const hour = new Date().getHours();
    return hour % 2 === 0 ? 'quicknode' : 'alchemy';
  }

  private setupDailyReset(): void {
    // –°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –ø–æ–ª–Ω–æ—á—å UTC
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setUTCDate(tomorrow.getUTCDate() + 1);
    tomorrow.setUTCHours(0, 0, 0, 0);
    
    const msUntilMidnight = tomorrow.getTime() - now.getTime();
    
    setTimeout(() => {
      this.resetDailyStats();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–±—Ä–æ—Å
      setInterval(() => {
        this.resetDailyStats();
      }, 24 * 60 * 60 * 1000);
      
    }, msUntilMidnight);
    
    // –°–±—Ä–æ—Å –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
    const msUntilNextHour = (60 - now.getMinutes()) * 60 * 1000 - (now.getSeconds() * 1000);
    
    setTimeout(() => {
      this.resetHourlyStats();
      
      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–∂–µ—á–∞—Å–Ω—ã–π —Å–±—Ä–æ—Å
      setInterval(() => {
        this.resetHourlyStats();
      }, 60 * 60 * 1000);
      
    }, msUntilNextHour);
  }
}