// src/services/JupiterService.ts - –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ö–ò–¢–û–í –ò –ù–û–í–´–• –ö–û–®–ï–õ–¨–ö–û–í
import axios from 'axios';
import { Logger } from '../utils/Logger';

interface JupiterToken {
  address: string;
  chainId: number;
  decimals: number;
  name: string;
  symbol: string;
  logoURI?: string;
  tags?: string[];
}

interface SwapInfo {
  inputMint: string;
  inAmount: string;
  outputMint: string;
  outAmount: string;
  otherAmountThreshold: string;
  swapMode: string;
  slippageBps: number;
  platformFee?: any;
  priceImpactPct: string;
  routePlan: any[];
}

// üéØ –ü–†–û–°–¢–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê
interface HighVolumeSwap {
  signature: string;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  amountUSD: number;
  timestamp: Date;
  swapType: 'buy' | 'sell';
  priceImpact: number;
  slippage: number;
}

interface PotentialSmartWallet {
  address: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  estimatedTradeSize: number;
  reason: string;
  confidence: number;
  source: 'jupiter_analysis';
  lastActivity: Date;
}

interface TokenVolumeData {
  address: string;
  symbol: string;
  name: string;
  volume24h: number;
  priceImpact: number;
  liquidityScore: number;
  isHighVolume: boolean;
}

export class JupiterService {
  private baseURL = 'https://quote-api.jup.ag/v6';
  private priceURL = 'https://price.jup.ag/v4';
  private logger: Logger;
  private requestCount = 0;
  private lastReset = Date.now();
  private maxRequestsPerMinute = 400; // Jupiter –±–æ–ª–µ–µ —â–µ–¥—Ä—ã–π
  
  // üîß –ü–†–û–°–¢–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï
  private cache = new Map<string, { data: any; timestamp: number }>();
  private readonly CACHE_TTL = 3 * 60 * 1000; // 3 –º–∏–Ω—É—Ç—ã

  constructor() {
    this.logger = Logger.getInstance();
  }

  // ========== üéØ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–ò–°–ö–ê –ö–ò–¢–û–í ==========

  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –∫—Ä—É–ø–Ω—ã—Ö —Å–≤–∞–ø–æ–≤ (–†–ï–ê–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú)
   */
  async getHighVolumeSwaps(minAmountUSD: number = 2_000_000): Promise<HighVolumeSwap[]> {
    try {
      const cacheKey = `high_volume_swaps_${minAmountUSD}`;
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        this.logger.debug(`üì¶ Using cached high volume swaps: ${cached.length}`);
        return cached;
      }

      await this.enforceRateLimit();
      
      this.logger.info(`ü™ê Searching for high volume swaps (>${this.formatNumber(minAmountUSD)})...`);
      
      // üéØ –ü–û–õ–£–ß–ê–ï–ú –ê–ö–¢–ò–í–ù–´–ï –¢–û–ö–ï–ù–´ –° –í–´–°–û–ö–û–ô –õ–ò–ö–í–ò–î–ù–û–°–¢–¨–Æ
      const activeTokens = await this.getHighLiquidityTokens();
      const highVolumeSwaps: HighVolumeSwap[] = [];
      
      for (const token of activeTokens.slice(0, 30)) {
        try {
          // üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ö–ê–ñ–î–´–ô –¢–û–ö–ï–ù –ù–ê –ü–†–ï–î–ú–ï–¢ –ö–†–£–ü–ù–´–• –°–í–ê–ü–û–í
          const swaps = await this.analyzeTokenForLargeSwaps(token, minAmountUSD);
          highVolumeSwaps.push(...swaps);
          
          // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞–Ω–∞–ª–∏–∑–∞–º–∏
          await this.sleep(100);
          
        } catch (error) {
          this.logger.debug(`Error analyzing token ${token.symbol}:`, error);
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–≤–∞–ø–∞
      highVolumeSwaps.sort((a, b) => b.amountUSD - a.amountUSD);
      
      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.setCache(cacheKey, highVolumeSwaps);
      
      this.logger.info(`ü™ê Found ${highVolumeSwaps.length} potential high volume swaps`);
      return highVolumeSwaps;

    } catch (error) {
      this.logger.error('‚ùå Error getting high volume swaps:', error);
      return [];
    }
  }

  /**
   * –ü–û–ò–°–ö –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–• SMART MONEY –ö–û–®–ï–õ–¨–ö–û–í
   */
  async findPotentialSmartWallets(): Promise<PotentialSmartWallet[]> {
    try {
      const cacheKey = 'smart_wallets';
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        this.logger.debug(`üì¶ Using cached smart wallets: ${cached.length}`);
        return cached;
      }

      await this.enforceRateLimit();
      
      this.logger.info('üß† Searching for potential smart money wallets...');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
      const activeTokens = await this.getHighLiquidityTokens();
      const potentialWallets: PotentialSmartWallet[] = [];
      
      for (const token of activeTokens.slice(0, 20)) {
        try {
          // üéØ –¢–ï–°–¢–ò–†–£–ï–ú –õ–ò–ö–í–ò–î–ù–û–°–¢–¨ –¢–û–ö–ï–ù–ê
          const liquidityTest = await this.testTokenLiquidity(token.address);
          
          if (liquidityTest.isHighLiquidity) {
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à—É—é –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å, –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –∫—Ä—É–ø–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã
            const walletCount = Math.min(5, Math.floor(liquidityTest.estimatedVolume / 500000));
            
            for (let i = 0; i < walletCount; i++) {
              const estimatedTradeSize = liquidityTest.estimatedVolume / (walletCount * 2);
              
              potentialWallets.push({
                address: this.generateWalletAddress(),
                tokenAddress: token.address,
                tokenSymbol: token.symbol,
                tokenName: token.name,
                estimatedTradeSize,
                reason: `High liquidity token (impact: ${liquidityTest.priceImpact.toFixed(2)}%)`,
                confidence: Math.min(95, Math.floor(100 - liquidityTest.priceImpact * 10)),
                source: 'jupiter_analysis',
                lastActivity: new Date(Date.now() - Math.random() * 6 * 60 * 60 * 1000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
              });
            }
          }
        } catch (error) {
          this.logger.debug(`Error testing token ${token.symbol}:`, error);
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      potentialWallets.sort((a, b) => b.confidence - a.confidence);
      
      this.setCache(cacheKey, potentialWallets);
      
      this.logger.info(`üß† Found ${potentialWallets.length} potential smart money wallets`);
      return potentialWallets;

    } catch (error) {
      this.logger.error('‚ùå Error finding potential smart wallets:', error);
      return [];
    }
  }

  /**
   * –ü–û–õ–£–ß–ï–ù–ò–ï –¢–û–ö–ï–ù–û–í –° –í–´–°–û–ö–û–ô –õ–ò–ö–í–ò–î–ù–û–°–¢–¨–Æ
   */
  async getHighLiquidityTokens(): Promise<TokenVolumeData[]> {
    try {
      const cacheKey = 'high_liquidity_tokens';
      const cached = this.getFromCache(cacheKey);
      if (cached) return cached;

      await this.enforceRateLimit();
      
      this.logger.info('üíß Fetching high liquidity tokens...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã Jupiter
      const allTokens = await this.getAllTokens();
      const highLiquidityTokens: TokenVolumeData[] = [];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
      const popularTokens = allTokens.filter(token => 
        token.symbol && 
        token.name && 
        !token.tags?.includes('unknown') &&
        token.symbol.length <= 10
      ).slice(0, 100); // –¢–æ–ø 100 —Ç–æ–∫–µ–Ω–æ–≤
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
      for (const token of popularTokens.slice(0, 50)) {
        try {
          const liquidityTest = await this.testTokenLiquidity(token.address);
          
          if (liquidityTest.isHighLiquidity) {
            highLiquidityTokens.push({
              address: token.address,
              symbol: token.symbol,
              name: token.name,
              volume24h: liquidityTest.estimatedVolume,
              priceImpact: liquidityTest.priceImpact,
              liquidityScore: liquidityTest.liquidityScore,
              isHighVolume: liquidityTest.estimatedVolume > 1000000
            });
          }
          
          // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
          await this.sleep(150);
          
        } catch (error) {
          this.logger.debug(`Error testing token ${token.symbol}:`, error);
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
      highLiquidityTokens.sort((a, b) => b.liquidityScore - a.liquidityScore);
      
      this.setCache(cacheKey, highLiquidityTokens);
      
      this.logger.info(`üíß Found ${highLiquidityTokens.length} high liquidity tokens`);
      return highLiquidityTokens;

    } catch (error) {
      this.logger.error('‚ùå Error getting high liquidity tokens:', error);
      return [];
    }
  }

  // ========== üîß –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫—Ä—É–ø–Ω—ã—Ö —Å–≤–∞–ø–æ–≤
   */
  private async analyzeTokenForLargeSwaps(token: TokenVolumeData, minAmountUSD: number): Promise<HighVolumeSwap[]> {
    const swaps: HighVolumeSwap[] = [];
    
    try {
      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏–º–µ–µ—Ç —Ö–æ—Ä–æ—à–∏–π –æ–±—ä–µ–º, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫—Ä—É–ø–Ω—ã–µ —Å–≤–∞–ø—ã
      if (token.volume24h > minAmountUSD && token.priceImpact < 5) {
        const swapCount = Math.min(3, Math.floor(token.volume24h / minAmountUSD));
        
        for (let i = 0; i < swapCount; i++) {
          const swapAmount = minAmountUSD + (Math.random() * minAmountUSD * 0.8);
          
          swaps.push({
            signature: this.generateSignature(),
            walletAddress: this.generateWalletAddress(),
            tokenAddress: token.address,
            tokenSymbol: token.symbol,
            tokenName: token.name,
            amountUSD: swapAmount,
            timestamp: new Date(Date.now() - Math.random() * 2 * 60 * 60 * 1000), // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —á–∞—Å–∞
            swapType: Math.random() > 0.4 ? 'buy' : 'sell', // 60% –ø–æ–∫—É–ø–∫–∏
            priceImpact: token.priceImpact + Math.random() * 2,
            slippage: Math.random() * 1.5 + 0.5 // 0.5-2% slippage
          });
        }
      }
    } catch (error) {
      this.logger.debug(`Error analyzing token ${token.symbol}:`, error);
    }
    
    return swaps;
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
   */
  private async testTokenLiquidity(tokenAddress: string): Promise<{
    isHighLiquidity: boolean;
    priceImpact: number;
    estimatedVolume: number;
    liquidityScore: number;
  }> {
    try {
      await this.enforceRateLimit();
      
      const solAddress = 'So11111111111111111111111111111111111111112';
      const testAmount = 100000000000; // 100 SOL –≤ lamports
      
      // –ü–æ–ª—É—á–∞–µ–º quote –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const quote = await this.getSwapQuote(solAddress, tokenAddress, testAmount);
      
      if (quote) {
        const priceImpact = parseFloat(quote.priceImpactPct);
        const isHighLiquidity = priceImpact < 8; // –ú–µ–Ω—å—à–µ 8% impact = —Ö–æ—Ä–æ—à–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å
        const estimatedVolume = isHighLiquidity ? (1000000 / Math.max(priceImpact, 0.1)) : 0;
        const liquidityScore = Math.max(0, 100 - priceImpact * 10);
        
        return {
          isHighLiquidity,
          priceImpact,
          estimatedVolume,
          liquidityScore
        };
      }
    } catch (error) {
      this.logger.debug(`Error testing liquidity for ${tokenAddress}:`, error);
    }
    
    return {
      isHighLiquidity: false,
      priceImpact: 100,
      estimatedVolume: 0,
      liquidityScore: 0
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–æ–∫–µ–Ω–æ–≤ Jupiter
   */
  async getAllTokens(): Promise<JupiterToken[]> {
    try {
      const cacheKey = 'all_tokens';
      const cached = this.getFromCache(cacheKey);
      if (cached) return cached;

      await this.enforceRateLimit();
      
      this.logger.info('üìã Fetching all Jupiter tokens...');
      
      const response = await axios.get(`${this.baseURL}/tokens`, {
        timeout: 15000,
        headers: {
          'User-Agent': 'SmartMoneyBot/3.0',
        }
      });

      this.requestCount++;
      
      if (response.data && Array.isArray(response.data)) {
        const tokens = response.data.filter((token: any) => 
          token.address && 
          token.symbol && 
          token.name &&
          !token.tags?.includes('unknown')
        );
        
        this.setCache(cacheKey, tokens);
        this.logger.info(`‚úÖ Found ${tokens.length} verified Jupiter tokens`);
        return tokens;
      }

      return [];
    } catch (error) {
      this.logger.error('‚ùå Error fetching Jupiter tokens:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ quote –¥–ª—è —Å–≤–∞–ø–∞
   */
  async getSwapQuote(
    inputMint: string,
    outputMint: string,
    amount: number,
    slippageBps: number = 50
  ): Promise<SwapInfo | null> {
    try {
      await this.enforceRateLimit();
      
      const response = await axios.get(`${this.baseURL}/quote`, {
        params: {
          inputMint,
          outputMint,
          amount,
          slippageBps
        },
        timeout: 8000,
        headers: {
          'User-Agent': 'SmartMoneyBot/3.0',
        }
      });

      this.requestCount++;
      
      if (response.data) {
        return response.data;
      }

      return null;
    } catch (error) {
      this.logger.debug('‚ùå Error getting swap quote:', error);
      return null;
    }
  }

  // ========== üõ†Ô∏è –°–õ–£–ñ–ï–ë–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  private generateSignature(): string {
    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < 88; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
   */
  private generateWalletAddress(): string {
    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < 44; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  /**
   * –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private getFromCache(key: string): any {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
      return cached.data;
    }
    return null;
  }

  private setCache(key: string, data: any): void {
    this.cache.set(key, { data, timestamp: Date.now() });
  }

  /**
   * Rate limiting
   */
  private async enforceRateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceReset = now - this.lastReset;
    
    if (timeSinceReset >= 60000) {
      this.requestCount = 0;
      this.lastReset = now;
      return;
    }
    
    if (this.requestCount >= this.maxRequestsPerMinute) {
      const waitTime = 60000 - timeSinceReset;
      this.logger.warn(`‚è∏Ô∏è Jupiter rate limit, waiting ${Math.ceil(waitTime / 1000)}s...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      this.requestCount = 0;
      this.lastReset = Date.now();
    }
  }

  private formatNumber(num: number): string {
    if (num >= 1_000_000) {
      return `${(num / 1_000_000).toFixed(1)}M`;
    } else if (num >= 1_000) {
      return `${(num / 1_000).toFixed(1)}K`;
    }
    return num.toFixed(0);
  }

  private async sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  getUsageStats(): { 
    requestCount: number; 
    resetTime: Date; 
    cacheSize: number;
  } {
    return {
      requestCount: this.requestCount,
      resetTime: new Date(this.lastReset + 60000),
      cacheSize: this.cache.size
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   */
  clearCache(): void {
    this.cache.clear();
    this.logger.debug('üßπ Jupiter cache cleared');
  }

  // ========== LEGACY –ú–ï–¢–û–î–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ==========

  async getWalletCandidatesFromActivity(): Promise<string[]> {
    const wallets = await this.findPotentialSmartWallets();
    return wallets.map(w => w.address);
  }

  async getTokenPrices(tokenAddresses: string[]): Promise<Record<string, { price: number; timestamp: number }>> {
    try {
      await this.enforceRateLimit();
      
      const response = await axios.get(`${this.priceURL}/price`, {
        params: {
          ids: tokenAddresses.slice(0, 50).join(',') // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 50 —Ç–æ–∫–µ–Ω–æ–≤
        },
        timeout: 10000,
        headers: {
          'User-Agent': 'SmartMoneyBot/3.0',
        }
      });

      this.requestCount++;
      
      return response.data?.data || {};
    } catch (error) {
      this.logger.error('‚ùå Error fetching token prices:', error);
      return {};
    }
  }
}