// src/services/SolanaMonitor.ts - –° –î–ï–¢–ï–ö–¢–û–†–û–ú –ê–ì–†–ï–ì–ê–¶–ò–ò –ü–û–ó–ò–¶–ò–ô + –ù–û–í–´–ï –ú–ï–¢–û–î–´
import { Database } from './Database';
import { TelegramNotifier } from './TelegramNotifier';
import { Logger } from '../utils/Logger';
import { TokenSwap, WalletInfo } from '../types';

// üéØ –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –ê–ì–†–ï–ì–ê–¶–ò–ò –ü–û–ó–ò–¶–ò–ô
interface PositionPurchase {
  transactionId: string;
  amountUSD: number;
  tokenAmount: number;
  price: number;
  timestamp: Date;
}

interface AggregatedPosition {
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  
  // –ü–æ–∫—É–ø–∫–∏
  purchases: PositionPurchase[];
  totalUSD: number;
  totalTokens: number;
  avgPrice: number;
  purchaseCount: number;
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
  firstBuyTime: Date;
  lastBuyTime: Date;
  timeWindowMinutes: number;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–±–∏–≤–∫–∏
  avgPurchaseSize: number;
  maxPurchaseSize: number;
  minPurchaseSize: number;
  sizeStandardDeviation: number;
  sizeCoefficient: number; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
  
  // –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  hasSimilarSizes: boolean;
  sizeTolerance: number; // –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  suspicionScore: number; // 0-100
  
  // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
  similarSizeCount: number;
  walletAgeDays: number;
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';
  detectionMethod: string;
  confidenceLevel: number;
}

// üÜï –ù–û–í–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê
interface WalletAnalysis {
  address: string;
  ageDays: number;
  totalTransactions: number;
  avgTransactionSize: number;
  suspiciousPatterns: string[];
  riskScore: number;
}

interface TokenAnalysis {
  address: string;
  symbol: string;
  ageDays: number;
  totalHolders: number;
  suspiciousActivity: boolean;
  riskFactors: string[];
}

export class SolanaMonitor {
  private database: Database;
  private telegramNotifier: TelegramNotifier;
  private logger: Logger;
  
  // üéØ –ê–ö–¢–ò–í–ù–´–ï –ü–û–ó–ò–¶–ò–ò –î–õ–Ø –ê–ì–†–ï–ì–ê–¶–ò–ò
  private activePositions = new Map<string, AggregatedPosition>();
  
  // üÜï –ö–ï–®–ò –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê
  private walletAnalysisCache = new Map<string, WalletAnalysis>();
  private tokenAnalysisCache = new Map<string, TokenAnalysis>();
  
  // üîß –ù–ê–°–¢–†–û–ô–ö–ò –î–ï–¢–ï–ö–¶–ò–ò
  private readonly config = {
    // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
    timeWindowMinutes: 180,        // 3 —á–∞—Å–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –ø–æ–∫—É–ø–æ–∫
    
    // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
    minPurchaseCount: 3,          // –ú–∏–Ω–∏–º—É–º 3 –ø–æ–∫—É–ø–∫–∏
    minTotalUSD: 10000,           // –ú–∏–Ω–∏–º—É–º $10K –æ–±—â–∞—è —Å—É–º–º–∞
    maxIndividualUSD: 8000,       // –ú–∞–∫—Å–∏–º—É–º $8K –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É
    
    // –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Å—É–º–º
    similarSizeTolerance: 2.0,    // 2% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å—É–º–º–æ–π"
    minSimilarPurchases: 3,       // –ú–∏–Ω–∏–º—É–º 3 –ø–æ—Ö–æ–∂–∏–µ –ø–æ–∫—É–ø–∫–∏
    
    // –î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    positionTimeoutMinutes: 180,  // 3 —á–∞—Å–∞ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
    minSuspicionScore: 75,        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –∞–ª–µ—Ä—Ç–∞
    
    // –§–∏–ª—å—Ç—Ä—ã –∫–æ—à–µ–ª—å–∫–æ–≤
    minWalletAge: 7,             // –ú–∏–Ω–∏–º—É–º 7 –¥–Ω–µ–π –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—à–µ–ª—å–∫–∞
    maxWalletActivity: 100,       // –ú–∞–∫—Å–∏–º—É–º 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –¥–µ–Ω—å (–∞–Ω—Ç–∏-–±–æ—Ç)
    
    // üÜï –ù–û–í–´–ï –ù–ê–°–¢–†–û–ô–ö–ò
    highRiskThreshold: 85,        // –ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    autoReportThreshold: 90,      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º —Ä–∏—Å–∫–µ
    cacheExpiryMinutes: 30,       // –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –∞–Ω–∞–ª–∏–∑–∞
    maxActivePositions: 1000,     // –ú–∞–∫—Å–∏–º—É–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –≤ –ø–∞–º—è—Ç–∏
    positionCleanupInterval: 10   // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
  };

  // üÜï –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´
  private stats = {
    totalPositionsDetected: 0,
    highRiskPositions: 0,
    alertsSent: 0,
    cacheHits: 0,
    cacheMisses: 0,
    positionsProcessed: 0,
    avgProcessingTime: 0
  };

  constructor(database: Database, telegramNotifier: TelegramNotifier) {
    this.database = database;
    this.telegramNotifier = telegramNotifier;
    this.logger = Logger.getInstance();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    this.startPositionMonitoring();
    
    // üÜï –ó–ê–ü–£–°–ö–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–£–Æ –û–ë–†–ê–ë–û–¢–ö–£ –î–ï–¢–ï–ö–¶–ò–ô
    this.startAutomaticProcessing();
    
    // üÜï –ó–ê–ü–£–°–ö–ê–ï–ú –û–ß–ò–°–¢–ö–£ –ö–ï–®–ï–ô
    this.startCacheCleanup();
  }

  async processTransaction(txData: any): Promise<void> {
    try {
      // –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      this.logger.debug(`Processing transaction: ${txData.signature}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      if (await this.database.isTransactionProcessed(txData.signature)) {
        return;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–∞–ø–µ
      const swapInfo = this.extractSwapInfo(txData);
      if (!swapInfo) return;

      // üéØ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–û–ë–ê–í–õ–Ø–ï–ú –í –ê–ì–†–ï–ì–ê–¶–ò–Æ –ü–û–ó–ò–¶–ò–ô
      if (swapInfo.swapType === 'buy' && swapInfo.amountUSD >= 500) { // –ú–∏–Ω–∏–º—É–º $500 –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        await this.addToPositionAggregation(swapInfo);
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫
      const walletInfo = await this.analyzeWallet(swapInfo.walletAddress);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      await this.database.saveTransaction(swapInfo);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
      if (walletInfo) {
        await this.database.saveWalletInfo(walletInfo);
      }

      this.logger.debug(`Transaction processed: ${swapInfo.tokenSymbol} - $${swapInfo.amountUSD}`);
      
    } catch (error) {
      this.logger.error('Error processing transaction:', error);
    }
  }

  // üéØ –û–°–ù–û–í–ù–û–ô –ú–ï–¢–û–î –ê–ì–†–ï–ì–ê–¶–ò–ò –ü–û–ó–ò–¶–ò–ô
  private async addToPositionAggregation(swap: TokenSwap): Promise<void> {
    const startTime = Date.now();
    
    try {
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ (–Ω–µ —Ä–∞–∑–±–∏–≤–∫–∞)
      if (swap.amountUSD > this.config.maxIndividualUSD) {
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –∫–æ—à–µ–ª—å–∫–∞
      const walletFilters = await this.checkWalletFilters(swap.walletAddress);
      if (!walletFilters.passed) {
        this.logger.debug(`Wallet filtered out: ${walletFilters.reason}`);
        return;
      }

      const positionKey = `${swap.walletAddress}-${swap.tokenAddress}`;
      const price = swap.amountUSD / swap.amount;
      
      const newPurchase: PositionPurchase = {
        transactionId: swap.transactionId,
        amountUSD: swap.amountUSD,
        tokenAmount: swap.amount,
        price,
        timestamp: swap.timestamp
      };

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
      let position = this.activePositions.get(positionKey);
      
      if (!position) {
        // üÜï –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ü–û–ó–ò–¶–ò–ò
        const walletAnalysis = await this.getWalletAnalysis(swap.walletAddress);
        const tokenAnalysis = await this.getTokenAnalysis(swap.tokenAddress, swap.tokenSymbol);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        position = {
          walletAddress: swap.walletAddress,
          tokenAddress: swap.tokenAddress,
          tokenSymbol: swap.tokenSymbol,
          tokenName: swap.tokenName,
          purchases: [],
          totalUSD: 0,
          totalTokens: 0,
          avgPrice: 0,
          purchaseCount: 0,
          firstBuyTime: swap.timestamp,
          lastBuyTime: swap.timestamp,
          timeWindowMinutes: 0,
          avgPurchaseSize: 0,
          maxPurchaseSize: 0,
          minPurchaseSize: Infinity,
          sizeStandardDeviation: 0,
          sizeCoefficient: 0,
          hasSimilarSizes: false,
          sizeTolerance: 0,
          suspicionScore: 0,
          // üÜï –ù–û–í–´–ï –ü–û–õ–Ø
          similarSizeCount: 0,
          walletAgeDays: walletAnalysis.ageDays,
          riskLevel: 'LOW',
          detectionMethod: 'position_aggregation',
          confidenceLevel: 0
        };
        this.activePositions.set(positionKey, position);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
      const timeDiffMinutes = (swap.timestamp.getTime() - position.firstBuyTime.getTime()) / (1000 * 60);
      
      if (timeDiffMinutes > this.config.timeWindowMinutes) {
        // –ï—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
        await this.analyzePosition(position);
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        const walletAnalysis = await this.getWalletAnalysis(swap.walletAddress);
        position = {
          walletAddress: swap.walletAddress,
          tokenAddress: swap.tokenAddress,
          tokenSymbol: swap.tokenSymbol,
          tokenName: swap.tokenName,
          purchases: [],
          totalUSD: 0,
          totalTokens: 0,
          avgPrice: 0,
          purchaseCount: 0,
          firstBuyTime: swap.timestamp,
          lastBuyTime: swap.timestamp,
          timeWindowMinutes: 0,
          avgPurchaseSize: 0,
          maxPurchaseSize: 0,
          minPurchaseSize: Infinity,
          sizeStandardDeviation: 0,
          sizeCoefficient: 0,
          hasSimilarSizes: false,
          sizeTolerance: 0,
          suspicionScore: 0,
          similarSizeCount: 0,
          walletAgeDays: walletAnalysis.ageDays,
          riskLevel: 'LOW',
          detectionMethod: 'position_aggregation',
          confidenceLevel: 0
        };
        this.activePositions.set(positionKey, position);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–∫—É–ø–∫—É –∫ –ø–æ–∑–∏—Ü–∏–∏
      position.purchases.push(newPurchase);
      position.totalUSD += swap.amountUSD;
      position.totalTokens += swap.amount;
      position.purchaseCount++;
      position.lastBuyTime = swap.timestamp;
      position.timeWindowMinutes = timeDiffMinutes;

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
      this.recalculatePositionMetrics(position);

      this.logger.debug(`Added to position: ${swap.tokenSymbol} - $${swap.amountUSD} (${position.purchaseCount} purchases, score: ${position.suspicionScore})`);

      // üÜï –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–¨
      if (position.purchaseCount >= this.config.minPurchaseCount) {
        if (position.suspicionScore >= this.config.minSuspicionScore) {
          this.logger.info(`üéØ Suspicious position pattern detected: ${position.tokenSymbol} - $${position.totalUSD} in ${position.purchaseCount} purchases (score: ${position.suspicionScore})`);
          
          // üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ü–†–ò –û–ß–ï–ù–¨ –í–´–°–û–ö–û–ú –†–ò–°–ö–ï
          if (position.suspicionScore >= this.config.autoReportThreshold) {
            await this.sendPositionSplittingAlert(position);
            this.stats.alertsSent++;
          }
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const processingTime = Date.now() - startTime;
      this.stats.avgProcessingTime = (this.stats.avgProcessingTime + processingTime) / 2;
      this.stats.positionsProcessed++;

    } catch (error) {
      this.logger.error('Error adding to position aggregation:', error);
    }
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ê–ù–ê–õ–ò–ó –ö–û–®–ï–õ–¨–ö–ê –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú
  private async getWalletAnalysis(walletAddress: string): Promise<WalletAnalysis> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = this.walletAnalysisCache.get(walletAddress);
    if (cached && Date.now() - cached.ageDays < this.config.cacheExpiryMinutes * 60 * 1000) {
      this.stats.cacheHits++;
      return cached;
    }

    this.stats.cacheMisses++;

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ
    const walletInfo = await this.database.getWalletInfo(walletAddress);
    const recentTxs = await this.database.getWalletTransactions(walletAddress, 50);
    
    const ageDays = walletInfo ? 
      (Date.now() - walletInfo.createdAt.getTime()) / (1000 * 60 * 60 * 24) : 1;
    
    const avgTxSize = recentTxs.length > 0 ? 
      recentTxs.reduce((sum, tx) => sum + tx.amountUSD, 0) / recentTxs.length : 0;

    // üÜï –î–ï–¢–ï–ö–¶–ò–Ø –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í
    const suspiciousPatterns: string[] = [];
    let riskScore = 0;

    // –û—á–µ–Ω—å –Ω–æ–≤—ã–π –∫–æ—à–µ–ª–µ–∫
    if (ageDays < 1) {
      suspiciousPatterns.push('very_new_wallet');
      riskScore += 30;
    } else if (ageDays < 7) {
      suspiciousPatterns.push('new_wallet');
      riskScore += 15;
    }

    // –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (recentTxs.length > 50) {
      suspiciousPatterns.push('high_activity');
      riskScore += 20;
    }

    // –ö—Ä—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    if (avgTxSize > 50000) {
      suspiciousPatterns.push('large_transactions');
      riskScore += 10;
    }

    const analysis: WalletAnalysis = {
      address: walletAddress,
      ageDays,
      totalTransactions: recentTxs.length,
      avgTransactionSize: avgTxSize,
      suspiciousPatterns,
      riskScore
    };

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.walletAnalysisCache.set(walletAddress, analysis);
    
    return analysis;
  }

  // üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–ê –° –ö–ï–®–ò–†–û–í–ê–ù–ò–ï–ú
  private async getTokenAnalysis(tokenAddress: string, tokenSymbol: string): Promise<TokenAnalysis> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    const cached = this.tokenAnalysisCache.get(tokenAddress);
    if (cached && Date.now() - cached.ageDays < this.config.cacheExpiryMinutes * 60 * 1000) {
      this.stats.cacheHits++;
      return cached;
    }

    this.stats.cacheMisses++;

    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É
    const tokenTxs = await this.database.getTransactionsByTokenAddress(tokenAddress, 100);
    
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
    const ageDays = tokenTxs.length > 0 ? 
      (Date.now() - Math.min(...tokenTxs.map(tx => tx.timestamp.getTime()))) / (1000 * 60 * 60 * 24) : 1;

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ä–∂–∞—Ç–µ–ª–∏
    const uniqueHolders = new Set(tokenTxs.map(tx => tx.walletAddress)).size;

    // üÜï –î–ï–¢–ï–ö–¶–ò–Ø –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò
    const riskFactors: string[] = [];
    let suspiciousActivity = false;

    // –û—á–µ–Ω—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    if (ageDays < 1) {
      riskFactors.push('very_new_token');
      suspiciousActivity = true;
    }

    // –ú–∞–ª–æ –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (tokenTxs.length > 50 && uniqueHolders < 10) {
      riskFactors.push('concentrated_trading');
      suspiciousActivity = true;
    }

    const analysis: TokenAnalysis = {
      address: tokenAddress,
      symbol: tokenSymbol,
      ageDays,
      totalHolders: uniqueHolders,
      suspiciousActivity,
      riskFactors
    };

    // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.tokenAnalysisCache.set(tokenAddress, analysis);
    
    return analysis;
  }

  // üîß –ü–ï–†–ï–°–ß–ï–¢ –ú–ï–¢–†–ò–ö –ü–û–ó–ò–¶–ò–ò
  private recalculatePositionMetrics(position: AggregatedPosition): void {
    const purchases = position.purchases;
    const amounts = purchases.map(p => p.amountUSD);
    
    // –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    position.avgPrice = position.totalUSD / position.totalTokens;
    position.avgPurchaseSize = position.totalUSD / position.purchaseCount;
    position.maxPurchaseSize = Math.max(...amounts);
    position.minPurchaseSize = Math.min(...amounts);
    
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
    const mean = position.avgPurchaseSize;
    const variance = amounts.reduce((sum, amount) => sum + Math.pow(amount - mean, 2), 0) / amounts.length;
    position.sizeStandardDeviation = Math.sqrt(variance);
    position.sizeCoefficient = position.sizeStandardDeviation / mean;
    
    // üéØ –î–ï–¢–ï–ö–¶–ò–Ø –ü–û–•–û–ñ–ò–• –°–£–ú–ú
    const similarSizeAnalysis = this.detectSimilarSizes(amounts);
    position.hasSimilarSizes = similarSizeAnalysis.hasSimilar;
    position.similarSizeCount = similarSizeAnalysis.count;
    position.sizeTolerance = this.calculateSizeTolerance(amounts);
    
    // üéØ –†–ê–°–ß–ï–¢ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò
    position.suspicionScore = this.calculateSuspicionScore(position);
    
    // üÜï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–†–û–í–ù–Ø –†–ò–°–ö–ê
    position.riskLevel = this.determineRiskLevel(position.suspicionScore);
    
    // üÜï –†–ê–°–ß–ï–¢ –£–í–ï–†–ï–ù–ù–û–°–¢–ò –í –î–ï–¢–ï–ö–¶–ò–ò
    position.confidenceLevel = this.calculateConfidenceLevel(position);
  }

  // üéØ –î–ï–¢–ï–ö–¶–ò–Ø –ü–û–•–û–ñ–ò–• –°–£–ú–ú (–ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê!)
  private detectSimilarSizes(amounts: number[]): { hasSimilar: boolean; count: number } {
    if (amounts.length < this.config.minSimilarPurchases) {
      return { hasSimilar: false, count: 0 };
    }
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—É–º–º—ã —Å —É—á–µ—Ç–æ–º —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    const groups = new Map<number, number[]>();
    
    for (const amount of amounts) {
      let foundGroup = false;
      
      for (const [groupKey, groupAmounts] of groups) {
        const tolerance = groupKey * (this.config.similarSizeTolerance / 100);
        
        if (Math.abs(amount - groupKey) <= tolerance) {
          groupAmounts.push(amount);
          foundGroup = true;
          break;
        }
      }
      
      if (!foundGroup) {
        groups.set(amount, [amount]);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≥—Ä—É–ø–ø–∞ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ—Ö–æ–∂–∏—Ö —Å—É–º–º
    let maxGroupSize = 0;
    for (const [_, groupAmounts] of groups) {
      if (groupAmounts.length >= this.config.minSimilarPurchases) {
        maxGroupSize = Math.max(maxGroupSize, groupAmounts.length);
      }
    }
    
    return {
      hasSimilar: maxGroupSize >= this.config.minSimilarPurchases,
      count: maxGroupSize
    };
  }

  // üéØ –†–ê–°–ß–ï–¢ –¢–û–õ–ï–†–ê–ù–¢–ù–û–°–¢–ò –†–ê–ó–ú–ï–†–û–í
  private calculateSizeTolerance(amounts: number[]): number {
    if (amounts.length < 2) return 0;
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –±–æ–ª—å—à—É—é –≥—Ä—É–ø–ø—É –ø–æ—Ö–æ–∂–∏—Ö —Å—É–º–º
    const groups = new Map<number, number[]>();
    
    for (const amount of amounts) {
      let foundGroup = false;
      
      for (const [groupKey, groupAmounts] of groups) {
        const tolerance = groupKey * (this.config.similarSizeTolerance / 100);
        
        if (Math.abs(amount - groupKey) <= tolerance) {
          groupAmounts.push(amount);
          foundGroup = true;
          break;
        }
      }
      
      if (!foundGroup) {
        groups.set(amount, [amount]);
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≥—Ä—É–ø–ø–µ
    let maxGroupSize = 0;
    let maxTolerance = 0;
    
    for (const [groupKey, groupAmounts] of groups) {
      if (groupAmounts.length > maxGroupSize) {
        maxGroupSize = groupAmounts.length;
        const deviations = groupAmounts.map(amount => Math.abs(amount - groupKey) / groupKey * 100);
        maxTolerance = Math.max(...deviations);
      }
    }
    
    return maxTolerance;
  }

  // üéØ –†–ê–°–ß–ï–¢ –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò (0-100) - –£–õ–£–ß–®–ï–ù–ù–´–ô
  private calculateSuspicionScore(position: AggregatedPosition): number {
    let score = 0;
    
    // 1. –ë–∞–∑–æ–≤—ã–π score –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫
    if (position.purchaseCount >= 3) score += 20;
    if (position.purchaseCount >= 5) score += 15;
    if (position.purchaseCount >= 8) score += 10;
    
    // 2. Score –∑–∞ –æ–±—â—É—é —Å—É–º–º—É
    if (position.totalUSD >= 10000) score += 15;
    if (position.totalUSD >= 25000) score += 10;
    if (position.totalUSD >= 50000) score += 10;
    
    // 3. üéØ –ì–õ–ê–í–ù–´–ô –ö–†–ò–¢–ï–†–ò–ô: –ü–æ—Ö–æ–∂–∏–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∫—É–ø–æ–∫
    if (position.hasSimilarSizes) {
      score += 30; // –û—Å–Ω–æ–≤–Ω–æ–π –±–æ–Ω—É—Å
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Ç–æ—á–Ω–æ—Å—Ç—å
      if (position.sizeTolerance <= 1.0) score += 15; // –û—á–µ–Ω—å —Ç–æ—á–Ω–æ (‚â§1%)
      else if (position.sizeTolerance <= 2.0) score += 10; // –¢–æ—á–Ω–æ (‚â§2%)
      else if (position.sizeTolerance <= 5.0) score += 5;  // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ (‚â§5%)
      
      // üÜï –ë–û–ù–£–° –ó–ê –ö–û–õ–ò–ß–ï–°–¢–í–û –ü–û–•–û–ñ–ò–• –ü–û–ö–£–ü–û–ö
      score += Math.min(position.similarSizeCount * 2, 10);
    }
    
    // 4. Score –∑–∞ –Ω–∏–∑–∫—É—é –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å)
    if (position.sizeCoefficient <= 0.1) score += 10; // –û—á–µ–Ω—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    else if (position.sizeCoefficient <= 0.2) score += 5; // –î–æ–≤–æ–ª—å–Ω–æ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ
    
    // 5. Score –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
    if (position.timeWindowMinutes <= 30) score += 10; // –í —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    else if (position.timeWindowMinutes <= 60) score += 5; // –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞
    
    // 6. –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    if (position.maxPurchaseSize / position.minPurchaseSize > 3) {
      score -= 15; // –®—Ç—Ä–∞—Ñ –∑–∞ –±–æ–ª—å—à—É—é —Ä–∞–∑–Ω–∏—Ü—É –≤ —Ä–∞–∑–º–µ—Ä–∞—Ö
    }
    
    // üÜï 7. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ö–¢–û–†–´ –†–ò–°–ö–ê
    
    // –í–æ–∑—Ä–∞—Å—Ç –∫–æ—à–µ–ª—å–∫–∞
    if (position.walletAgeDays < 1) score += 20;
    else if (position.walletAgeDays < 7) score += 10;
    
    // –†–∞–∑–º–µ—Ä –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ –±–ª–∏–∑–æ–∫ –∫ –ª–∏–º–∏—Ç—É
    const avgCloseToLimit = position.avgPurchaseSize / this.config.maxIndividualUSD;
    if (avgCloseToLimit > 0.8) score += 15; // –û—á–µ–Ω—å –±–ª–∏–∑–∫–æ –∫ –ª–∏–º–∏—Ç—É
    else if (avgCloseToLimit > 0.6) score += 10;
    
    return Math.min(Math.max(score, 0), 100);
  }

  // üÜï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –£–†–û–í–ù–Ø –†–ò–°–ö–ê
  private determineRiskLevel(suspicionScore: number): 'LOW' | 'MEDIUM' | 'HIGH' {
    if (suspicionScore >= this.config.highRiskThreshold) return 'HIGH';
    if (suspicionScore >= this.config.minSuspicionScore) return 'MEDIUM';
    return 'LOW';
  }

  // üÜï –†–ê–°–ß–ï–¢ –£–í–ï–†–ï–ù–ù–û–°–¢–ò –í –î–ï–¢–ï–ö–¶–ò–ò
  private calculateConfidenceLevel(position: AggregatedPosition): number {
    let confidence = 50; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∏–ª—å–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    if (position.hasSimilarSizes) confidence += 30;
    if (position.sizeCoefficient < 0.15) confidence += 20;
    if (position.purchaseCount >= 5) confidence += 15;
    if (position.timeWindowMinutes <= 60) confidence += 10;
    
    // –°–Ω–∏–∂–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ —Å–ª–∞–±—ã—Ö —Å–∏–≥–Ω–∞–ª–∞—Ö
    if (position.purchaseCount < 4) confidence -= 20;
    if (position.sizeTolerance > 5) confidence -= 15;
    if (position.timeWindowMinutes > 120) confidence -= 10;
    
    return Math.min(Math.max(confidence, 0), 100);
  }

  // üîç –ü–†–û–í–ï–†–ö–ê –§–ò–õ–¨–¢–†–û–í –ö–û–®–ï–õ–¨–ö–ê
  private async checkWalletFilters(walletAddress: string): Promise<{
    passed: boolean;
    reason?: string;
  }> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const analysis = await this.getWalletAnalysis(walletAddress);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—à–µ–ª—å–∫–∞
      if (analysis.ageDays < this.config.minWalletAge) {
        return { passed: false, reason: `Wallet too new (${analysis.ageDays.toFixed(1)} days)` };
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–∞–Ω—Ç–∏-–±–æ—Ç)
      if (analysis.totalTransactions > this.config.maxWalletActivity) {
        return { passed: false, reason: `Too active (${analysis.totalTransactions} txs)` };
      }
      
      return { passed: true };
      
    } catch (error) {
      this.logger.error('Error checking wallet filters:', error);
      return { passed: true }; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    }
  }

  // üîç –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù–ù–û–ô –ü–û–ó–ò–¶–ò–ò
  private async analyzePosition(position: AggregatedPosition): Promise<void> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞
      if (!this.shouldReportPosition(position)) {
        return;
      }

      // üÜï –°–û–•–†–ê–ù–Ø–ï–ú –í –ë–ê–ó–£ –î–ê–ù–ù–´–•
      const aggregationId = await this.database.savePositionAggregation({
        walletAddress: position.walletAddress,
        tokenAddress: position.tokenAddress,
        tokenSymbol: position.tokenSymbol,
        tokenName: position.tokenName,
        totalUSD: position.totalUSD,
        purchaseCount: position.purchaseCount,
        avgPurchaseSize: position.avgPurchaseSize,
        timeWindowMinutes: position.timeWindowMinutes,
        suspicionScore: position.suspicionScore,
        sizeTolerance: position.sizeTolerance,
        firstBuyTime: position.firstBuyTime,
        lastBuyTime: position.lastBuyTime,
        purchases: position.purchases.map(p => ({
          transactionId: p.transactionId,
          amountUSD: p.amountUSD,
          timestamp: p.timestamp
        })),
        // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø
        maxPurchaseSize: position.maxPurchaseSize,
        minPurchaseSize: position.minPurchaseSize,
        sizeStdDeviation: position.sizeStandardDeviation,
        sizeCoefficient: position.sizeCoefficient,
        similarSizeCount: position.similarSizeCount,
        walletAgeDays: position.walletAgeDays,
        riskLevel: position.riskLevel
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
      await this.sendPositionSplittingAlert(position);
      
      this.logger.info(`üö® Position splitting detected and saved: ${position.tokenSymbol} - $${position.totalUSD.toFixed(0)} in ${position.purchaseCount} purchases (score: ${position.suspicionScore}, ID: ${aggregationId})`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      this.stats.totalPositionsDetected++;
      if (position.riskLevel === 'HIGH') {
        this.stats.highRiskPositions++;
      }

    } catch (error) {
      this.logger.error('Error analyzing position:', error);
    }
  }

  // üîç –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ï–†–ò–ï–í –î–õ–Ø –ê–õ–ï–†–¢–ê
  private shouldReportPosition(position: AggregatedPosition): boolean {
    return position.purchaseCount >= this.config.minPurchaseCount &&
           position.totalUSD >= this.config.minTotalUSD &&
           position.suspicionScore >= this.config.minSuspicionScore &&
           position.hasSimilarSizes &&
           position.timeWindowMinutes <= this.config.timeWindowMinutes &&
           position.confidenceLevel >= 60; // üÜï –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨
  }

  // üì¢ –û–¢–ü–†–ê–í–ö–ê –ê–õ–ï–†–¢–ê –û –†–ê–ó–ë–ò–í–ö–ï –ü–û–ó–ò–¶–ò–ò
  private async sendPositionSplittingAlert(position: AggregatedPosition): Promise<void> {
    try {
      await this.telegramNotifier.sendPositionSplittingAlert({
        walletAddress: position.walletAddress,
        tokenAddress: position.tokenAddress,
        tokenSymbol: position.tokenSymbol,
        tokenName: position.tokenName,
        totalUSD: position.totalUSD,
        purchaseCount: position.purchaseCount,
        avgPurchaseSize: position.avgPurchaseSize,
        timeWindowMinutes: position.timeWindowMinutes,
        suspicionScore: position.suspicionScore,
        sizeTolerance: position.sizeTolerance,
        firstBuyTime: position.firstBuyTime,
        lastBuyTime: position.lastBuyTime,
        purchases: position.purchases.map(p => ({
          amountUSD: p.amountUSD,
          timestamp: p.timestamp,
          transactionId: p.transactionId
        }))
      });

      this.stats.alertsSent++;

    } catch (error) {
      this.logger.error('Error sending position splitting alert:', error);
    }
  }

  // üïí –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–ò–ô (–ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê)
  private startPositionMonitoring(): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(async () => {
      await this.checkExpiredPositions();
    }, 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç

    this.logger.info('üïí Position monitoring started: checking every 5 minutes');
  }

  // üÜï –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–ï–¢–ï–ö–¶–ò–ô
  private startAutomaticProcessing(): void {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã
    setInterval(async () => {
      await this.processUnhandledDetections();
    }, 2 * 60 * 1000); // 2 –º–∏–Ω—É—Ç—ã

    this.logger.info('ü§ñ Automatic processing started: every 2 minutes');
  }

  // üÜï –û–ß–ò–°–¢–ö–ê –ö–ï–®–ï–ô
  private startCacheCleanup(): void {
    // –û—á–∏—â–∞–µ–º –∫–µ—à–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupCaches();
      this.cleanupActivePositions();
    }, 30 * 60 * 1000); // 30 –º–∏–Ω—É—Ç

    this.logger.info('üßπ Cache cleanup started: every 30 minutes');
  }

  // üïí –ü–†–û–í–ï–†–ö–ê –ò–°–¢–ï–ö–®–ò–• –ü–û–ó–ò–¶–ò–ô
  private async checkExpiredPositions(): Promise<void> {
    const now = Date.now();
    const expiredPositions: string[] = [];
    
    for (const [key, position] of this.activePositions) {
      const timeSinceLastBuy = (now - position.lastBuyTime.getTime()) / (1000 * 60);
      
      if (timeSinceLastBuy > this.config.positionTimeoutMinutes) {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–µ–∫—à—É—é –ø–æ–∑–∏—Ü–∏—é
        await this.analyzePosition(position);
        expiredPositions.push(key);
      }
    }
    
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–∑–∏—Ü–∏–∏
    for (const key of expiredPositions) {
      this.activePositions.delete(key);
    }
    
    if (expiredPositions.length > 0) {
      this.logger.debug(`üßπ Cleaned up ${expiredPositions.length} expired positions`);
    }
  }

  // üÜï –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –î–ï–¢–ï–ö–¶–ò–ô
  private async processUnhandledDetections(): Promise<void> {
    try {
      const unprocessed = await this.database.getUnprocessedPositionAggregations(20);
      
      for (const detection of unprocessed) {
        if (detection.suspicionScore >= this.config.autoReportThreshold) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç –¥–ª—è –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π
          await this.telegramNotifier.sendCycleLog(
            `üö® <b>HIGH RISK POSITION DETECTED</b>\n\n` +
            `üí∞ Total: <code>$${this.formatNumber(detection.totalUSD)}</code>\n` +
            `ü™ô Token: <code>#${detection.tokenSymbol}</code>\n` +
            `üë§ Wallet: <code>${detection.walletAddress.slice(0, 8)}...${detection.walletAddress.slice(-4)}</code>\n` +
            `üéØ Risk Score: <code>${detection.suspicionScore}/100</code>\n` +
            `üî¢ Purchases: <code>${detection.purchaseCount}</code>\n\n` +
            `<a href="https://solscan.io/token/${detection.tokenAddress}">Token</a> | <a href="https://solscan.io/account/${detection.walletAddress}">Wallet</a>`
          );
          
          await this.database.markPositionAggregationAsProcessed(detection.id, true);
        } else {
          // –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
          await this.database.markPositionAggregationAsProcessed(detection.id, false);
        }
      }
      
      if (unprocessed.length > 0) {
        this.logger.info(`ü§ñ Processed ${unprocessed.length} unhandled detections`);
      }
      
    } catch (error) {
      this.logger.error('Error processing unhandled detections:', error);
    }
  }

  // üÜï –û–ß–ò–°–¢–ö–ê –ö–ï–®–ï–ô
  private cleanupCaches(): void {
    const now = Date.now();
    const expiryMs = this.config.cacheExpiryMinutes * 60 * 1000;
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—à–µ–ª—å–∫–æ–≤
    let walletCacheCleared = 0;
    for (const [key, analysis] of this.walletAnalysisCache) {
      if (now - analysis.ageDays > expiryMs) {
        this.walletAnalysisCache.delete(key);
        walletCacheCleared++;
      }
    }
    
    // –û—á–∏—â–∞–µ–º –∫–µ—à –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–æ–≤
    let tokenCacheCleared = 0;
    for (const [key, analysis] of this.tokenAnalysisCache) {
      if (now - analysis.ageDays > expiryMs) {
        this.tokenAnalysisCache.delete(key);
        tokenCacheCleared++;
      }
    }
    
    if (walletCacheCleared > 0 || tokenCacheCleared > 0) {
      this.logger.debug(`üßπ Cache cleanup: ${walletCacheCleared} wallets, ${tokenCacheCleared} tokens`);
    }
  }

  // üÜï –û–ß–ò–°–¢–ö–ê –ê–ö–¢–ò–í–ù–´–• –ü–û–ó–ò–¶–ò–ô
  private cleanupActivePositions(): void {
    if (this.activePositions.size > this.config.maxActivePositions) {
      // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏
      const sortedPositions = Array.from(this.activePositions.entries())
        .sort(([,a], [,b]) => a.firstBuyTime.getTime() - b.firstBuyTime.getTime());
      
      const toRemove = sortedPositions.slice(0, this.activePositions.size - this.config.maxActivePositions);
      
      for (const [key] of toRemove) {
        this.activePositions.delete(key);
      }
      
      this.logger.info(`üßπ Removed ${toRemove.length} old active positions (limit: ${this.config.maxActivePositions})`);
    }
  }

  // üÜï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ß–ò–°–ï–õ
  private formatNumber(num: number): string {
    if (num >= 1_000_000) {
      return `${(num / 1_000_000).toFixed(1)}M`;
    } else if (num >= 1_000) {
      return `${(num / 1_000).toFixed(1)}K`;
    } else {
      return num.toFixed(0);
    }
  }

  // –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  private extractSwapInfo(txData: any): TokenSwap | null {
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–≤–∞–ø–µ
      return {
        transactionId: txData.signature,
        walletAddress: txData.feePayer,
        tokenAddress: 'sample_token_address',
        tokenSymbol: 'SAMPLE',
        tokenName: 'Sample Token',
        amount: 1000,
        amountUSD: 100,
        timestamp: new Date(txData.timestamp * 1000),
        dex: 'Unknown',
        isNewWallet: false,
        isReactivatedWallet: false,
        walletAge: 0,
        daysSinceLastActivity: 0,
        swapType: 'buy'
      };
    } catch (error) {
      this.logger.error('Error extracting swap info:', error);
      return null;
    }
  }

  private async analyzeWallet(walletAddress: string): Promise<WalletInfo | null> {
    try {
      // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ—à–µ–ª—å–∫–∞
      return {
        address: walletAddress,
        createdAt: new Date(),
        lastActivityAt: new Date(),
        isNew: false,
        isReactivated: false,
        relatedWallets: [],
        suspicionScore: 0,
        insiderFlags: []
      };
    } catch (error) {
      this.logger.error('Error analyzing wallet:', error);
      return null;
    }
  }

  // üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ì–†–ï–ì–ê–¢–û–†–ê
  getAggregationStats() {
    return {
      activePositions: this.activePositions.size,
      config: this.config,
      stats: this.stats,
      cacheStats: {
        walletAnalysisCache: this.walletAnalysisCache.size,
        tokenAnalysisCache: this.tokenAnalysisCache.size,
        cacheHitRate: this.stats.cacheHits > 0 ? 
          (this.stats.cacheHits / (this.stats.cacheHits + this.stats.cacheMisses) * 100).toFixed(1) + '%' : '0%'
      },
      positions: Array.from(this.activePositions.values()).map(p => ({
        wallet: `${p.walletAddress.slice(0, 8)}...${p.walletAddress.slice(-4)}`,
        token: p.tokenSymbol,
        purchases: p.purchaseCount,
        totalUSD: p.totalUSD,
        suspicionScore: p.suspicionScore,
        hasSimilarSizes: p.hasSimilarSizes,
        timeWindow: p.timeWindowMinutes,
        riskLevel: p.riskLevel,
        confidence: p.confidenceLevel
      }))
    };
  }

  // üÜï –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–µ—Ç–µ–∫—Ü–∏–π
  getDetectionStats() {
    return {
      totalDetected: this.stats.totalPositionsDetected,
      highRiskDetected: this.stats.highRiskPositions,
      alertsSent: this.stats.alertsSent,
      avgProcessingTime: this.stats.avgProcessingTime,
      activePositions: this.activePositions.size
    };
  }

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  async forceCheckAllPositions(): Promise<number> {
    let processed = 0;
    
    for (const [key, position] of this.activePositions) {
      if (position.suspicionScore >= this.config.minSuspicionScore) {
        await this.analyzePosition(position);
        this.activePositions.delete(key);
        processed++;
      }
    }
    
    this.logger.info(`üîç Force-checked all positions: ${processed} analyzed`);
    return processed;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–ª—é—á—É
  getActivePosition(walletAddress: string, tokenAddress: string): AggregatedPosition | null {
    const key = `${walletAddress}-${tokenAddress}`;
    return this.activePositions.get(key) || null;
  }

  // üÜï –ú–ï–¢–û–î –ü–†–û–í–ï–†–ö–ò –ù–ê –ê–ì–†–ï–ì–ê–¶–ò–Æ (–î–õ–Ø –î–†–£–ì–ò–• –°–ï–†–í–ò–°–û–í)
  async checkForPositionAggregation(walletAddress: string, tokenAddress: string, amountUSD: number): Promise<{
    isPartOfAggregation: boolean;
    suspicionScore: number;
    aggregationId?: number;
  }> {
    try {
      const positionKey = `${walletAddress}-${tokenAddress}`;
      const position = this.activePositions.get(positionKey);
      
      if (position && position.purchaseCount >= this.config.minPurchaseCount) {
        return {
          isPartOfAggregation: true,
          suspicionScore: position.suspicionScore,
          aggregationId: undefined // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î
        };
      }
      
      return {
        isPartOfAggregation: false,
        suspicionScore: 0
      };
      
    } catch (error) {
      this.logger.error('Error checking for position aggregation:', error);
      return {
        isPartOfAggregation: false,
        suspicionScore: 0
      };
    }
  }
}