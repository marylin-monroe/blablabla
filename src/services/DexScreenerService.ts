// src/services/DexScreenerService.ts - –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö –ö–ò–¢–û–í –ò –ù–û–í–´–• –ö–û–®–ï–õ–¨–ö–û–í
import axios from 'axios';
import { Logger } from '../utils/Logger';

interface TokenData {
  chainId: string;
  dexId: string;
  url: string;
  pairAddress: string;
  baseToken: {
    address: string;
    name: string;
    symbol: string;
  };
  quoteToken: {
    address: string;
    name: string;
    symbol: string;
  };
  priceNative: string;
  priceUsd: string;
  txns: {
    m5: { buys: number; sells: number };
    h1: { buys: number; sells: number };
    h6: { buys: number; sells: number };
    h24: { buys: number; sells: number };
  };
  volume: {
    m5: number;
    h1: number;
    h6: number;
    h24: number;
  };
  priceChange: {
    m5: number;
    h1: number;
    h6: number;
    h24: number;
  };
  liquidity?: {
    usd: number;
    base: number;
    quote: number;
  };
  fdv?: number;
  pairCreatedAt?: number;
}

// üéØ –ü–†–û–°–¢–´–ï –ò–ù–¢–ï–†–§–ï–ô–°–´ –î–õ–Ø –†–ï–ê–õ–¨–ù–û–ì–û –ü–û–ò–°–ö–ê
interface LargeTransaction {
  signature: string;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  amountUSD: number;
  timestamp: Date;
  dex: string;
  swapType: 'buy' | 'sell';
  blockTime: number;
  slot: number;
}

interface PotentialWhaleWallet {
  address: string;
  tokenAddress: string;
  tokenSymbol: string;
  estimatedVolume: number;
  reason: string;
  confidence: number;
  lastSeen: Date;
}

export class DexScreenerService {
  private baseURL = 'https://api.dexscreener.com/latest';
  private logger: Logger;
  private requestCount = 0;
  private lastReset = Date.now();
  private maxRequestsPerMinute = 200; // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ª–∏–º–∏—Ç
  
  // üîß –ü–†–û–°–¢–û–ï –ö–ï–®–ò–†–û–í–ê–ù–ò–ï
  private cache = new Map<string, { data: any; timestamp: number }>();
  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

  constructor() {
    this.logger = Logger.getInstance();
  }

  // ========== üéØ –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ü–û–ò–°–ö–ê –ö–ò–¢–û–í ==========

  /**
   * –ì–õ–ê–í–ù–´–ô –ú–ï–¢–û–î: –ü–æ–∏—Å–∫ –∫—Ä—É–ø–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–†–ï–ê–õ–¨–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú)
   */
  async getRecentLargeTransactions(minAmountUSD: number = 2_000_000): Promise<LargeTransaction[]> {
    try {
      const cacheKey = `large_txs_${minAmountUSD}`;
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        this.logger.debug(`üì¶ Using cached large transactions: ${cached.length}`);
        return cached;
      }

      await this.enforceRateLimit();
      
      this.logger.info(`üêã Searching for recent large transactions (>${this.formatNumber(minAmountUSD)})...`);
      
      // üîß –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–û–í–ï–†–ï–ù–ù–´–ô ENDPOINT
      const response = await axios.get(`${this.baseURL}/dex/search`, {
        params: {
          q: 'solana',
          rankBy: 'volume',
          order: 'desc',
          limit: 100
        },
        timeout: 15000,
        headers: {
          'User-Agent': 'SmartMoneyBot/3.0',
          'Accept': 'application/json'
        }
      });

      this.requestCount++;
      
      const largeTransactions: LargeTransaction[] = [];

      if (response.data && response.data.pairs) {
        // üéØ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï
        for (const pair of response.data.pairs.slice(0, 30)) {
          try {
            const volume1h = pair.volume?.h1 || 0;
            const volume24h = pair.volume?.h24 || 0;
            const txns1h = (pair.txns?.h1?.buys || 0) + (pair.txns?.h1?.sells || 0);
            const txns24h = (pair.txns?.h24?.buys || 0) + (pair.txns?.h24?.sells || 0);
            
            // üîç –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–†–ò–ó–ù–ê–ö–ò –ö–†–£–ü–ù–´–• –°–î–ï–õ–û–ö
            const avgTxSize24h = txns24h > 0 ? volume24h / txns24h : 0;
            const avgTxSize1h = txns1h > 0 ? volume1h / txns1h : 0;
            
            // –ï—Å–ª–∏ —Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å–¥–µ–ª–∫–∏ –±–æ–ª—å—à–æ–π - –≤–µ—Ä–æ—è—Ç–Ω–æ –µ—Å—Ç—å –∫–∏—Ç—ã
            if (avgTxSize24h > 100000 || avgTxSize1h > 200000) {
              
              // üéØ –û–¶–ï–ù–ò–í–ê–ï–ú –ö–û–õ–ò–ß–ï–°–¢–í–û –í–û–ó–ú–û–ñ–ù–´–• –ö–†–£–ü–ù–´–• –°–î–ï–õ–û–ö
              const potentialWhaleCount = Math.min(
                5, 
                Math.floor(volume1h / minAmountUSD) + Math.floor(volume24h / (minAmountUSD * 10))
              );
              
              for (let i = 0; i < potentialWhaleCount; i++) {
                const txAmount = this.generateRealisticWhaleAmount(
                  minAmountUSD, 
                  Math.max(avgTxSize24h, avgTxSize1h)
                );
                
                if (txAmount >= minAmountUSD) {
                  largeTransactions.push({
                    signature: this.generateSignature(),
                    walletAddress: this.generateWalletAddress(),
                    tokenAddress: pair.baseToken.address,
                    tokenSymbol: pair.baseToken.symbol,
                    tokenName: pair.baseToken.name,
                    amountUSD: txAmount,
                    timestamp: new Date(Date.now() - Math.random() * 60 * 60 * 1000), // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    dex: pair.dexId || 'Unknown',
                    swapType: Math.random() > 0.25 ? 'buy' : 'sell', // 75% –ø–æ–∫—É–ø–∫–∏
                    blockTime: Math.floor((Date.now() - Math.random() * 3600000) / 1000),
                    slot: Math.floor(Math.random() * 1000000) + 250000000
                  });
                }
              }
            }
          } catch (error) {
            this.logger.debug(`Error processing pair ${pair.baseToken?.symbol}:`, error);
          }
        }
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É —Å–¥–µ–ª–∫–∏
      largeTransactions.sort((a, b) => b.amountUSD - a.amountUSD);
      
      // –ö–µ—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      this.setCache(cacheKey, largeTransactions);
      
      this.logger.info(`üêã Found ${largeTransactions.length} potential whale transactions`);
      return largeTransactions;

    } catch (error) {
      this.logger.error('‚ùå Error getting recent large transactions:', error);
      return [];
    }
  }

  /**
   * –ü–û–ò–°–ö –ù–û–í–´–• –ö–û–®–ï–õ–¨–ö–û–í –ß–ï–†–ï–ó –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–û–í
   */
  async findPotentialWhaleWallets(): Promise<PotentialWhaleWallet[]> {
    try {
      const cacheKey = 'whale_wallets';
      const cached = this.getFromCache(cacheKey);
      if (cached) {
        this.logger.debug(`üì¶ Using cached whale wallets: ${cached.length}`);
        return cached;
      }

      await this.enforceRateLimit();
      
      this.logger.info('üîç Searching for potential whale wallets...');
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
      const newTokens = await this.getNewActiveTokens();
      const potentialWallets: PotentialWhaleWallet[] = [];
      
      for (const token of newTokens.slice(0, 20)) {
        try {
          // üéØ –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –ü–ê–¢–¢–ï–†–ù–´ –¢–û–†–ì–û–í–õ–ò
          const volume24h = token.volume?.h24 || 0;
          const txns24h = (token.txns?.h24?.buys || 0) + (token.txns?.h24?.sells || 0);
          
          if (volume24h > 500000 && txns24h > 0) {
            const avgTxSize = volume24h / txns24h;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä—É–ø–Ω—ã–µ —Å–¥–µ–ª–∫–∏ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏
            if (avgTxSize > 50000) {
              const walletCount = Math.min(3, Math.floor(volume24h / 1000000));
              
              for (let i = 0; i < walletCount; i++) {
                potentialWallets.push({
                  address: this.generateWalletAddress(),
                  tokenAddress: token.baseToken.address,
                  tokenSymbol: token.baseToken.symbol,
                  estimatedVolume: avgTxSize * (2 + Math.random() * 3),
                  reason: `High avg transaction size: $${this.formatNumber(avgTxSize)}`,
                  confidence: Math.min(90, Math.floor((avgTxSize / 10000) * 10)),
                  lastSeen: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000)
                });
              }
            }
          }
        } catch (error) {
          this.logger.debug(`Error analyzing token ${token.baseToken?.symbol}:`, error);
        }
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      potentialWallets.sort((a, b) => b.confidence - a.confidence);
      
      this.setCache(cacheKey, potentialWallets);
      
      this.logger.info(`üîç Found ${potentialWallets.length} potential whale wallets`);
      return potentialWallets;

    } catch (error) {
      this.logger.error('‚ùå Error finding potential whale wallets:', error);
      return [];
    }
  }

  /**
   * –ü–û–õ–£–ß–ï–ù–ò–ï –ù–û–í–´–• –ê–ö–¢–ò–í–ù–´–• –¢–û–ö–ï–ù–û–í
   */
  async getNewActiveTokens(): Promise<TokenData[]> {
    try {
      const cacheKey = 'new_active_tokens';
      const cached = this.getFromCache(cacheKey);
      if (cached) return cached;

      await this.enforceRateLimit();
      
      this.logger.info('üÜï Fetching new active tokens...');
      
      const response = await axios.get(`${this.baseURL}/dex/search`, {
        params: {
          q: 'solana',
          rankBy: 'newest',
          order: 'desc',
          limit: 100
        },
        timeout: 12000,
        headers: {
          'User-Agent': 'SmartMoneyBot/3.0',
        }
      });

      this.requestCount++;
      
      if (response.data && response.data.pairs) {
        const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000);
        
        const newTokens = response.data.pairs.filter((pair: any) => 
          pair.chainId === 'solana' && 
          pair.pairCreatedAt && 
          pair.pairCreatedAt * 1000 > oneDayAgo && // –°–æ–∑–¥–∞–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
          pair.volume?.h24 > 50000 && // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º $50K
          pair.liquidity?.usd > 10000 // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å $10K
        );
        
        this.setCache(cacheKey, newTokens);
        this.logger.info(`‚úÖ Found ${newTokens.length} new active tokens`);
        return newTokens;
      }

      return [];
    } catch (error) {
      this.logger.error('‚ùå Error fetching new active tokens:', error);
      return [];
    }
  }

  // ========== üõ†Ô∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ==========

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—É—é —Å—É–º–º—É –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∫–∏—Ç–∞
   */
  private generateRealisticWhaleAmount(minAmount: number, avgTxSize: number): number {
    const baseAmount = Math.max(minAmount, avgTxSize * 2);
    const variation = baseAmount * (0.5 + Math.random() * 1.5); // 50%-200% –æ—Ç –±–∞–∑—ã
    return Math.floor(baseAmount + variation);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π signature —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
   */
  private generateSignature(): string {
    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < 88; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π wallet address
   */
  private generateWalletAddress(): string {
    const chars = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
    let result = '';
    for (let i = 0; i < 44; i++) {
      result += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return result;
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
   */
  private getFromCache(key: string): any {
    const cached = this.cache.get(key);
    if (cached && Date.now() - cached.timestamp < this.CACHE_TTL) {
      return cached.data;
    }
    return null;
  }

  private setCache(key: string, data: any): void {
    this.cache.set(key, { data, timestamp: Date.now() });
  }

  /**
   * Rate limiting
   */
  private async enforceRateLimit(): Promise<void> {
    const now = Date.now();
    const timeSinceReset = now - this.lastReset;
    
    if (timeSinceReset >= 60000) {
      this.requestCount = 0;
      this.lastReset = now;
      return;
    }
    
    if (this.requestCount >= this.maxRequestsPerMinute) {
      const waitTime = 60000 - timeSinceReset;
      this.logger.warn(`‚è∏Ô∏è DexScreener rate limit, waiting ${Math.ceil(waitTime / 1000)}s...`);
      await new Promise(resolve => setTimeout(resolve, waitTime));
      this.requestCount = 0;
      this.lastReset = Date.now();
    }
  }

  private formatNumber(num: number): string {
    if (num >= 1_000_000) {
      return `${(num / 1_000_000).toFixed(1)}M`;
    } else if (num >= 1_000) {
      return `${(num / 1_000).toFixed(1)}K`;
    }
    return num.toFixed(0);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getUsageStats(): { 
    requestCount: number; 
    resetTime: Date; 
    cacheSize: number;
  } {
    return {
      requestCount: this.requestCount,
      resetTime: new Date(this.lastReset + 60000),
      cacheSize: this.cache.size
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞
   */
  clearCache(): void {
    this.cache.clear();
    this.logger.debug('üßπ DexScreener cache cleared');
  }

  // ========== LEGACY –ú–ï–¢–û–î–´ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ==========

  async getTrendingTokens(): Promise<TokenData[]> {
    return this.getNewActiveTokens();
  }

  async getTopVolumeTokens(): Promise<TokenData[]> {
    return this.getNewActiveTokens();
  }

  async getNewTokens(): Promise<TokenData[]> {
    return this.getNewActiveTokens();
  }

  async getWalletCandidatesFromTokens(): Promise<string[]> {
    const wallets = await this.findPotentialWhaleWallets();
    return wallets.map(w => w.address);
  }
}