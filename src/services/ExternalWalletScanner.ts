// src/services/ExternalWalletScanner.ts
import { DexScreenerService } from './DexScreenerService';
import { JupiterService } from './JupiterService';
import { ApiCreditManager } from './ApiCreditManager';
import { Database } from './Database';
import { Logger } from '../utils/Logger';
import axios from 'axios';

interface TokenCandidate {
  address: string;
  source: 'dexscreener' | 'jupiter';
  volume24h?: number;
  liquidity?: number;
  marketCap?: number;
  age?: number; // days since creation
}

interface WalletCandidate {
  address: string;
  score: number;
  reasons: string[];
  lastActivity: Date;
  estimatedVolume: number;
  tokenCount: number;
  source: 'token_holders' | 'recent_traders' | 'high_volume';
}

export class ExternalWalletScanner {
  private dexScreener: DexScreenerService;
  private jupiter: JupiterService;
  private creditManager: ApiCreditManager;
  private database: Database;
  private logger: Logger;
  private heliusApiKey?: string; // üîß –°–î–ï–õ–ê–ù–û –û–ü–¶–ò–û–ù–ê–õ–¨–ù–´–ú
  private hasHelius: boolean = false; // üÜï –§–õ–ê–ì –î–û–°–¢–£–ü–ù–û–°–¢–ò HELIUS
  
  constructor(database: Database, creditManager: ApiCreditManager) {
    this.dexScreener = new DexScreenerService();
    this.jupiter = new JupiterService();
    this.creditManager = creditManager;
    this.database = database;
    this.logger = Logger.getInstance();
    this.heliusApiKey = process.env.HELIUS_API_KEY;
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: Helius —Ç–µ–ø–µ—Ä—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
    if (this.heliusApiKey) {
      this.hasHelius = true;
      this.logger.info('üåç External wallet scanner initialized WITH Helius support');
    } else {
      this.hasHelius = false;
      this.logger.warn('‚ö†Ô∏è External wallet scanner initialized WITHOUT Helius (DexScreener + Jupiter only)');
    }
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤
   * –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ë–ï–ó Helius - —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ API
   */
  async findWalletCandidates(): Promise<string[]> {
    try {
      this.logger.info('üöÄ Starting external wallet candidate discovery...');
      
      // Stage 1: –ú–∞—Å—Å–æ–≤—ã–π —Å–±–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (0 RPC –∫—Ä–µ–¥–∏—Ç–æ–≤)
      const tokenCandidates = await this.collectTokenCandidates();
      this.logger.info(`üìã Collected ${tokenCandidates.length} token candidates from external APIs`);
      
      if (tokenCandidates.length === 0) {
        this.logger.warn('‚ö†Ô∏è No token candidates found from external APIs');
        return [];
      }
      
      // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑ Helius –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      if (!this.hasHelius) {
        this.logger.info('üìä No Helius - returning token addresses for internal blockchain analysis');
        return tokenCandidates.slice(0, 50).map(t => t.address);
      }

      // Stage 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤-–¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Helius)
      const walletCandidates = await this.getTokenHolders(tokenCandidates);
      this.logger.info(`üë• Found ${walletCandidates.length} wallet candidates from token analysis`);
      
      // Stage 3: –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
      const activeWallets = await this.quickActivityFilter(walletCandidates);
      this.logger.info(`‚úÖ Filtered to ${activeWallets.length} active wallets`);
      
      // Stage 4: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–±–æ—Ä —Ç–æ–ø–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      const topCandidates = this.rankAndSelectTopCandidates(activeWallets, 50);
      this.logger.info(`üéØ Selected top ${topCandidates.length} candidates for deep analysis`);
      
      return topCandidates.map(c => c.address);
      
    } catch (error) {
      this.logger.error('‚ùå Error in external wallet scanning:', error);
      return [];
    }
  }

  /**
   * Stage 1: –°–æ–±–∏—Ä–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã –∏–∑ DexScreener –∏ Jupiter (0 –∫—Ä–µ–¥–∏—Ç–æ–≤)
   */
  private async collectTokenCandidates(): Promise<TokenCandidate[]> {
    const candidates: TokenCandidate[] = [];
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ DexScreener
      const dexTokens = await this.dexScreener.getWalletCandidatesFromTokens();
      dexTokens.forEach(token => {
        candidates.push({
          address: token,
          source: 'dexscreener'
        });
      });
      
      this.logger.info(`üìä DexScreener provided ${dexTokens.length} token candidates`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ Jupiter
      const jupiterTokens = await this.jupiter.getWalletCandidatesFromActivity();
      jupiterTokens.forEach(token => {
        candidates.push({
          address: token,
          source: 'jupiter'
        });
      });
      
      this.logger.info(`ü™ê Jupiter provided ${jupiterTokens.length} token candidates`);
      
      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Ç–¥–∞–≤–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç DexScreener
      const uniqueCandidates = new Map<string, TokenCandidate>();
      candidates.forEach(candidate => {
        const existing = uniqueCandidates.get(candidate.address);
        if (!existing || candidate.source === 'dexscreener') {
          uniqueCandidates.set(candidate.address, candidate);
        }
      });
      
      return Array.from(uniqueCandidates.values()).slice(0, 100); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 100
      
    } catch (error) {
      this.logger.error('Error collecting token candidates:', error);
      return candidates;
    }
  }

  /**
   * Stage 2: –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–æ–≤ —á–µ—Ä–µ–∑ Helius API (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
   */
  private async getTokenHolders(tokenCandidates: TokenCandidate[]): Promise<WalletCandidate[]> {
    if (!this.hasHelius) {
      this.logger.info('üìä Skipping token holders analysis - no Helius API');
      return [];
    }

    const walletCandidates = new Map<string, WalletCandidate>();
    
    for (const token of tokenCandidates.slice(0, 50)) { // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if (!this.creditManager.canAffordOperation('token_balance', 1)) {
          this.logger.warn('üí∏ Insufficient credits for token holder analysis');
          break;
        }
        
        const holders = await this.getTopTokenHolders(token.address);
        this.creditManager.logUsage('token_balance', 1, holders.length > 0);
        
        holders.forEach(holder => {
          const existing = walletCandidates.get(holder.address);
          if (existing) {
            existing.tokenCount++;
            existing.estimatedVolume += holder.balance * 1000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            existing.reasons.push(`holds ${token.address.slice(0, 8)}`);
          } else {
            walletCandidates.set(holder.address, {
              address: holder.address,
              score: holder.balance,
              reasons: [`holds ${token.address.slice(0, 8)}`],
              lastActivity: new Date(),
              estimatedVolume: holder.balance * 1000,
              tokenCount: 1,
              source: 'token_holders'
            });
          }
        });
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 200));
        
      } catch (error) {
        this.logger.debug(`Error getting holders for ${token.address}:`, error);
        this.creditManager.logUsage('token_balance', 1, false);
      }
    }
    
    return Array.from(walletCandidates.values());
  }

  /**
   * Stage 3: –ë—ã—Å—Ç—Ä–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Helius)
   */
  private async quickActivityFilter(candidates: WalletCandidate[]): Promise<WalletCandidate[]> {
    if (!this.hasHelius || candidates.length === 0) {
      this.logger.info('üìä Skipping activity filtering - no Helius API or no candidates');
      return candidates;
    }

    const activeWallets: WalletCandidate[] = [];
    
    for (const candidate of candidates) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—é–¥–∂–µ—Ç
        if (!this.creditManager.canAffordOperation('quick_activity_check', 1)) {
          this.logger.warn('üí∏ Insufficient credits for activity filtering');
          break;
        }
        
        const isActive = await this.checkWalletActivity(candidate.address);
        this.creditManager.logUsage('quick_activity_check', 1, isActive !== null);
        
        if (isActive) {
          candidate.lastActivity = isActive.lastActivity;
          candidate.estimatedVolume = isActive.recentVolume;
          activeWallets.push(candidate);
        }
        
        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        this.logger.debug(`Error checking activity for ${candidate.address}:`, error);
        this.creditManager.logUsage('quick_activity_check', 1, false);
      }
    }
    
    return activeWallets;
  }

  /**
   * Stage 4: –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–±–æ—Ä —Ç–æ–ø–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   */
  private rankAndSelectTopCandidates(candidates: WalletCandidate[], limit: number): WalletCandidate[] {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫–æ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    candidates.forEach(candidate => {
      const daysSinceActivity = (Date.now() - candidate.lastActivity.getTime()) / (1000 * 60 * 60 * 24);
      const activityScore = Math.max(0, 10 - daysSinceActivity); // 0-10 –±–∞–ª–ª–æ–≤ –∑–∞ —Å–≤–µ–∂–µ—Å—Ç—å
      const volumeScore = Math.min(10, candidate.estimatedVolume / 10000); // 0-10 –±–∞–ª–ª–æ–≤ –∑–∞ –æ–±—ä–µ–º
      const diversityScore = Math.min(10, candidate.tokenCount); // 0-10 –±–∞–ª–ª–æ–≤ –∑–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
      
      candidate.score = activityScore * 0.4 + volumeScore * 0.4 + diversityScore * 0.2;
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É –∏ –±–µ—Ä–µ–º —Ç–æ–ø
    return candidates
      .sort((a, b) => b.score - a.score)
      .slice(0, limit);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø–æ–≤—ã—Ö –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ Helius (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
   */
  private async getTopTokenHolders(tokenAddress: string): Promise<Array<{ address: string; balance: number }>> {
    if (!this.hasHelius || !this.heliusApiKey) {
      return [];
    }

    try {
      const response = await axios.post(
        `https://mainnet.helius-rpc.com/?api-key=${this.heliusApiKey}`,
        {
          jsonrpc: '2.0',
          id: 'get-token-accounts',
          method: 'getTokenLargestAccounts',
          params: [tokenAddress]
        },
        {
          timeout: 10000,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );

      if (response.data?.result?.value) {
        const accounts = response.data.result.value
          .filter((account: any) => account.uiAmount > 0)
          .slice(0, 20) // –¢–æ–ø 20 –¥–µ—Ä–∂–∞—Ç–µ–ª–µ–π
          .map((account: any) => ({
            address: account.address,
            balance: account.uiAmount || 0
          }));
        
        return accounts;
      }

      return [];
    } catch (error) {
      this.logger.debug(`Error getting token holders for ${tokenAddress}:`, error);
      return [];
    }
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å Helius)
   */
  private async checkWalletActivity(walletAddress: string): Promise<{ lastActivity: Date; recentVolume: number } | null> {
    if (!this.hasHelius || !this.heliusApiKey) {
      return null;
    }

    try {
      const response = await axios.post(
        `https://mainnet.helius-rpc.com/?api-key=${this.heliusApiKey}`,
        {
          jsonrpc: '2.0',
          id: 'get-signatures',
          method: 'getSignaturesForAddress',
          params: [
            walletAddress,
            {
              limit: 10 // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            }
          ]
        },
        {
          timeout: 5000,
          headers: {
            'Content-Type': 'application/json',
          }
        }
      );

      if (response.data?.result && Array.isArray(response.data.result)) {
        const signatures = response.data.result;
        
        if (signatures.length === 0) {
          return null; // –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        }
        
        const lastSignature = signatures[0];
        const lastActivity = new Date(lastSignature.blockTime * 1000);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        const daysSinceActivity = (Date.now() - lastActivity.getTime()) / (1000 * 60 * 60 * 24);
        
        if (daysSinceActivity > 7) {
          return null; // –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        }
        
        // –û—Ü–µ–Ω–∏–≤–∞–µ–º –Ω–µ–¥–∞–≤–Ω–∏–π –æ–±—ä–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        const recentVolume = signatures.length * 5000; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        
        return {
          lastActivity,
          recentVolume
        };
      }

      return null;
    } catch (error) {
      this.logger.debug(`Error checking activity for ${walletAddress}:`, error);
      return null;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞
   */
  getStats(): {
    hasHelius: boolean;
    dexScreenerStats: any;
    jupiterStats: any;
    creditStats: any;
  } {
    return {
      hasHelius: this.hasHelius,
      dexScreenerStats: this.dexScreener.getUsageStats(),
      jupiterStats: this.jupiter.getUsageStats(),
      creditStats: this.creditManager.getUsageStats()
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≥–æ—Ç–æ–≤ –ª–∏ —Å–∫–∞–Ω–µ—Ä –∫ —Ä–∞–±–æ—Ç–µ
   */
  isReady(): boolean {
    // –¢–µ–ø–µ—Ä—å –≥–æ—Ç–æ–≤ –≤—Å–µ–≥–¥–∞, Helius –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
    return !!(this.creditManager);
  }

  /**
   * üÜï –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–∫–∞–Ω–µ—Ä–∞
   */
  getCapabilities(): {
    externalTokens: boolean;
    walletHolders: boolean;
    activityFilter: boolean;
    fullPipeline: boolean;
  } {
    return {
      externalTokens: true, // DexScreener + Jupiter –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
      walletHolders: this.hasHelius,
      activityFilter: this.hasHelius,
      fullPipeline: this.hasHelius
    };
  }
}