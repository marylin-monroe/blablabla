// src/types/index.ts - –ë–ï–ó Family Detection + –ê–ì–†–ï–ì–ê–¶–ò–Ø –ü–û–ó–ò–¶–ò–ô
export interface TokenSwap {
  transactionId: string;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  amount: number;
  amountUSD: number;
  timestamp: Date;
  dex: string;
  isNewWallet: boolean;
  isReactivatedWallet: boolean;
  walletAge: number;
  daysSinceLastActivity: number;
  price?: number;
  pnl?: number;
  multiplier?: number;
  winrate?: number;
  timeToTarget?: string;
  swapType?: 'buy' | 'sell';
}

export interface WalletInfo {
  address: string;
  createdAt: Date;
  lastActivityAt: Date;
  isNew: boolean;
  isReactivated: boolean;
  relatedWallets?: string[];
  tradingHistory?: TradingHistory;
  suspicionScore?: number;
  insiderFlags?: string[];
}

export interface TradingHistory {
  totalTrades: number;
  winRate: number;
  avgBuySize: number;
  maxBuySize: number;
  minBuySize: number;
  sizeProgression: number[];
  timeProgression: Date[];
  panicSells: number;
  fomoeBuys: number;
  fakeLosses: number;
}

export interface TokenInfo {
  address: string;
  symbol: string;
  name: string;
  decimals: number;
  createdAt?: Date;
  isNew?: boolean;
  launchPrice?: number;
  currentPrice?: number;
}

export interface TokenAggregation {
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  totalVolumeUSD: number;
  uniqueWallets: Set<string>;
  transactions: TokenSwap[];
  isNewToken: boolean;
  biggestPurchase?: TokenSwap;
  firstPurchaseTime: Date;
  lastPurchaseTime: Date;
  avgWalletAge: number;
  suspiciousWallets: number;
}

export interface SmartMoneyReport {
  period: string;
  tokenAggregations: TokenAggregation[];
  totalVolumeUSD: number;
  uniqueTokensCount: number;
  bigOrders: TokenSwap[];
  insiderAlerts: InsiderAlert[];
}

export interface InsiderAlert {
  walletAddress: string;
  tokenSwap?: TokenSwap;
  tokenAddress?: string;
  tokenSymbol?: string;
  amountUSD?: number;
  price?: number;
  signalStrength?: number;
  timestamp?: Date;
  suspicionScore: number;
  detectionReasons: string[];
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  confidence: number;
  tradingHistory: TradingHistory;
}

export interface HeliusTransaction {
  signature: string;
  timestamp: number;
  slot: number;
  blockTime: number;
  fee: number;
  feePayer: string;
  instructions: any[];
  events?: any[];
  nativeTransfers?: any[];
  tokenTransfers?: any[];
  accountData?: any[];
  transactionError?: any;
}

// Smart Money —Ç–∏–ø—ã - –ë–ï–ó Family Detection
export interface SmartMoneyWallet {
  address: string;
  category: 'sniper' | 'hunter' | 'trader';
  winRate: number;
  totalPnL: number;
  totalTrades: number;
  avgTradeSize: number;
  maxTradeSize: number;
  minTradeSize: number;
  sharpeRatio?: number;
  maxDrawdown?: number;
  lastActiveAt: Date;
  performanceScore: number;
  volumeScore?: number;
  isActive: boolean;
  
  // Family –ø–æ–ª—è –û–¢–ö–õ–Æ–ß–ï–ù–´ - –≤—Å–µ–≥–¥–∞ false/undefined
  isFamilyMember?: false; // –≤—Å–µ–≥–¥–∞ false
  familyAddresses?: undefined; // –≤—Å–µ–≥–¥–∞ undefined
  coordinationScore?: 0; // –≤—Å–µ–≥–¥–∞ 0
  stealthLevel?: number;
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  earlyEntryRate?: number;
  avgHoldTime?: number;
  
  createdAt?: Date;
  updatedAt?: Date;
}

export interface SmartMoneyFlow {
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  period: '1h' | '24h';
  totalInflowUSD: number;
  totalOutflowUSD: number;
  netFlowUSD: number;
  uniqueWallets: number;
  avgTradeSize: number;
  topWallets: Array<{
    address: string;
    amountUSD: number;
    category: string;
  }>;
}

export interface HotNewToken {
  address: string;
  symbol: string;
  name: string;
  fdv: number;
  smStakeUSD: number;
  ageHours: number;
  buyVolumeUSD: number;
  sellVolumeUSD: number;
  buyCount: number;
  sellCount: number;
  uniqueSmWallets: number;
  topBuyers: Array<{
    address: string;
    amountUSD: number;
    category: string;
  }>;
}

export interface SmartMoneySwap {
  transactionId: string;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  tokenAmount: number;
  amountUSD: number;
  swapType: 'buy' | 'sell';
  timestamp: Date;
  
  // Smart Money –º–µ—Ç—Ä–∏–∫–∏
  category: 'sniper' | 'hunter' | 'trader';
  winRate: number;
  pnl: number;
  totalTrades: number;
  
  // Family –ø–æ–ª—è –û–¢–ö–õ–Æ–ß–ï–ù–´ - –≤—Å–µ–≥–¥–∞ false/0/undefined
  isFamilyMember: false; // –≤—Å–µ–≥–¥–∞ false
  familySize?: 0; // –≤—Å–µ–≥–¥–∞ 0
  familyId?: undefined; // –≤—Å–µ–≥–¥–∞ undefined
}

// üéØ –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –ê–ì–†–ï–ì–ê–¶–ò–ò –ü–û–ó–ò–¶–ò–ô

// –ü–æ–∫—É–ø–∫–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ –ø–æ–∑–∏—Ü–∏–∏
export interface PositionPurchase {
  transactionId: string;
  amountUSD: number;
  tokenAmount: number;
  price: number;
  timestamp: Date;
}

// –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
export interface AggregatedPosition {
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  
  // –ü–æ–∫—É–ø–∫–∏
  purchases: PositionPurchase[];
  totalUSD: number;
  totalTokens: number;
  avgPrice: number;
  purchaseCount: number;
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
  firstBuyTime: Date;
  lastBuyTime: Date;
  timeWindowMinutes: number;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–±–∏–≤–∫–∏
  avgPurchaseSize: number;
  maxPurchaseSize: number;
  minPurchaseSize: number;
  sizeStandardDeviation: number;
  sizeCoefficient: number; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
  
  // –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  hasSimilarSizes: boolean;
  sizeTolerance: number; // –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  suspicionScore: number; // 0-100
}

// –ê–ª–µ—Ä—Ç –æ —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ–∑–∏—Ü–∏–∏
export interface PositionSplittingAlert {
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  totalUSD: number;
  purchaseCount: number;
  avgPurchaseSize: number;
  timeWindowMinutes: number;
  suspicionScore: number;
  sizeTolerance: number;
  firstBuyTime: Date;
  lastBuyTime: Date;
  purchases: Array<{
    amountUSD: number;
    timestamp: Date;
    transactionId: string;
  }>;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –≤ –ë–î
export interface SavedPositionAggregation {
  id: number;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  totalUSD: number;
  purchaseCount: number;
  avgPurchaseSize: number;
  timeWindowMinutes: number;
  suspicionScore: number;
  sizeTolerance: number;
  firstBuyTime: Date;
  lastBuyTime: Date;
  detectedAt: Date;
  purchases: Array<{
    transactionId: string;
    amountUSD: number;
    timestamp: Date;
  }>;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
export interface PositionAggregationStats {
  totalPositions: number;
  highSuspicionPositions: number; // score >= 75
  totalValueUSD: number;
  avgSuspicionScore: number;
  topWalletsByPositions: Array<{
    walletAddress: string;
    positionCount: number;
    totalValueUSD: number;
  }>;
}

// –ì—Ä—É–ø–ø–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–∫—É–ø–æ–∫
export interface SimilarPurchaseGroup {
  count: number;
  avgAmount: number;
  tolerance: number;
  amounts: number[];
}

// Family —Ç–∏–ø—ã –£–î–ê–õ–ï–ù–´ - –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
// export interface FamilyWalletCluster - –£–î–ê–õ–ï–ù

export interface WalletPerformanceMetrics {
  totalPnL: number;
  winRate: number;
  totalTrades: number;
  avgTradeSize: number;
  maxTradeSize: number;
  minTradeSize: number;
  sharpeRatio: number;
  maxDrawdown: number;
  profitFactor: number;
  avgHoldTime: number;
  earlyEntryRate: number;
  recentActivity: Date;
}

export interface WalletAnalysisResult {
  address: string;
  isSmartMoney: boolean;
  category?: 'sniper' | 'hunter' | 'trader';
  metrics: WalletPerformanceMetrics;
  familyConnections: []; // –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  disqualificationReasons: string[];
}

// üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–ï–¢–ï–ö–¶–ò–ò –ê–ì–†–ï–ì–ê–¶–ò–ò
export interface PositionDetectionConfig {
  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
  timeWindowMinutes: number;        // 90 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
  minPurchaseCount: number;         // –ú–∏–Ω–∏–º—É–º 3 –ø–æ–∫—É–ø–∫–∏
  minTotalUSD: number;              // –ú–∏–Ω–∏–º—É–º $10K –æ–±—â–∞—è —Å—É–º–º–∞
  maxIndividualUSD: number;         // –ú–∞–∫—Å–∏–º—É–º $8K –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É
  
  // –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Å—É–º–º
  similarSizeTolerance: number;     // 2% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å—É–º–º–æ–π"
  minSimilarPurchases: number;      // –ú–∏–Ω–∏–º—É–º 3 –ø–æ—Ö–æ–∂–∏–µ –ø–æ–∫—É–ø–∫–∏
  
  // –î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  positionTimeoutMinutes: number;   // 180 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
  minSuspicionScore: number;        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –∞–ª–µ—Ä—Ç–∞
  
  // –§–∏–ª—å—Ç—Ä—ã –∫–æ—à–µ–ª—å–∫–æ–≤
  minWalletAge: number;            // –ú–∏–Ω–∏–º—É–º 7 –¥–Ω–µ–π –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—à–µ–ª—å–∫–∞
  maxWalletActivity: number;       // –ú–∞–∫—Å–∏–º—É–º 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –¥–µ–Ω—å (–∞–Ω—Ç–∏-–±–æ—Ç)
}

// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ö–û–®–ï–õ–¨–ö–ê
export interface WalletFilterResult {
  passed: boolean;
  reason?: string;
}

// üéØ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ì–†–ï–ì–ê–¢–û–†–ê
export interface AggregationStats {
  activePositions: number;
  config: PositionDetectionConfig;
  positions: Array<{
    wallet: string;
    token: string;
    purchases: number;
    totalUSD: number;
    suspicionScore: number;
    hasSimilarSizes: boolean;
    timeWindow: number;
  }>;
}