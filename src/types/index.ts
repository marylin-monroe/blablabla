// src/types/index.ts - –ê–ö–ö–£–†–ê–¢–ù–û –î–û–ë–ê–í–õ–ï–ù–´ –¢–ò–ü–´ –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –ü–û–ò–°–ö–ê + –í–°–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –¢–ò–ü–´ –°–û–•–†–ê–ù–ï–ù–´

// ===== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –¢–ò–ü–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) =====

export interface TokenSwap {
  transactionId: string;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  amount: number;
  amountUSD: number;
  timestamp: Date;
  dex: string;
  isNewWallet: boolean;
  isReactivatedWallet: boolean;
  walletAge: number;
  daysSinceLastActivity: number;
  price?: number;
  pnl?: number;
  multiplier?: number;
  winrate?: number;
  timeToTarget?: string;
  swapType?: 'buy' | 'sell';
  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø –î–õ–Ø POSITION AGGREGATION
  isAggregated?: boolean;
  aggregationId?: number;
  suspicionScore?: number;
}

export interface WalletInfo {
  address: string;
  createdAt: Date;
  lastActivityAt: Date;
  isNew: boolean;
  isReactivated: boolean;
  relatedWallets?: string[];
  tradingHistory?: TradingHistory;
  suspicionScore?: number;
  insiderFlags?: string[];
}

export interface TradingHistory {
  totalTrades: number;
  winRate: number;
  avgBuySize: number;
  maxBuySize: number;
  minBuySize: number;
  sizeProgression: number[];
  timeProgression: Date[];
  panicSells: number;
  fomoeBuys: number;
  fakeLosses: number;
}

export interface TokenInfo {
  address: string;
  symbol: string;
  name: string;
  decimals: number;
  createdAt?: Date;
  isNew?: boolean;
  launchPrice?: number;
  currentPrice?: number;
}

export interface TokenAggregation {
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  totalVolumeUSD: number;
  uniqueWallets: Set<string>;
  transactions: TokenSwap[];
  isNewToken: boolean;
  biggestPurchase?: TokenSwap;
  firstPurchaseTime: Date;
  lastPurchaseTime: Date;
  avgWalletAge: number;
  suspiciousWallets: number;
}

export interface SmartMoneyReport {
  period: string;
  tokenAggregations: TokenAggregation[];
  totalVolumeUSD: number;
  uniqueTokensCount: number;
  bigOrders: TokenSwap[];
  insiderAlerts: InsiderAlert[];
}

export interface InsiderAlert {
  walletAddress: string;
  tokenSwap?: TokenSwap;
  tokenAddress?: string;
  tokenSymbol?: string;
  amountUSD?: number;
  price?: number;
  signalStrength?: number;
  timestamp?: Date;
  suspicionScore: number;
  detectionReasons: string[];
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL';
  confidence: number;
  tradingHistory: TradingHistory;
}

export interface HeliusTransaction {
  signature: string;
  timestamp: number;
  slot: number;
  blockTime: number;
  fee: number;
  feePayer: string;
  instructions: any[];
  events?: any[];
  nativeTransfers?: any[];
  tokenTransfers?: any[];
  accountData?: any[];
  transactionError?: any;
}

// Smart Money —Ç–∏–ø—ã - –ë–ï–ó Family Detection
export interface SmartMoneyWallet {
  address: string;
  category: 'sniper' | 'hunter' | 'trader';
  winRate: number;
  totalPnL: number;
  totalTrades: number;
  avgTradeSize: number;
  maxTradeSize: number;
  minTradeSize: number;
  sharpeRatio?: number;
  maxDrawdown?: number;
  lastActiveAt: Date;
  performanceScore: number;
  volumeScore?: number;
  isActive: boolean;
  
  // Family –ø–æ–ª—è –û–¢–ö–õ–Æ–ß–ï–ù–´ - –≤—Å–µ–≥–¥–∞ false/undefined
  isFamilyMember?: false; // –≤—Å–µ–≥–¥–∞ false
  familyAddresses?: undefined; // –≤—Å–µ–≥–¥–∞ undefined
  coordinationScore?: 0; // –≤—Å–µ–≥–¥–∞ 0
  stealthLevel?: number;
  
  // –ö–∞—Ç–µ–≥–æ—Ä–∏—è-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
  earlyEntryRate?: number;
  avgHoldTime?: number;
  
  createdAt?: Date;
  updatedAt?: Date;
}

export interface SmartMoneyFlow {
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  period: '1h' | '24h';
  totalInflowUSD: number;
  totalOutflowUSD: number;
  netFlowUSD: number;
  uniqueWallets: number;
  avgTradeSize: number;
  topWallets: Array<{
    address: string;
    amountUSD: number;
    category: string;
  }>;
}

export interface HotNewToken {
  address: string;
  symbol: string;
  name: string;
  fdv: number;
  smStakeUSD: number;
  ageHours: number;
  buyVolumeUSD: number;
  sellVolumeUSD: number;
  buyCount: number;
  sellCount: number;
  uniqueSmWallets: number;
  topBuyers: Array<{
    address: string;
    amountUSD: number;
    category: string;
  }>;
}

export interface SmartMoneySwap {
  transactionId: string;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  tokenAmount: number;
  amountUSD: number;
  swapType: 'buy' | 'sell';
  timestamp: Date;
  
  // Smart Money –º–µ—Ç—Ä–∏–∫–∏
  category: 'sniper' | 'hunter' | 'trader';
  winRate: number;
  pnl: number;
  totalTrades: number;
  
  // Family –ø–æ–ª—è –û–¢–ö–õ–Æ–ß–ï–ù–´ - –≤—Å–µ–≥–¥–∞ false/0/undefined
  isFamilyMember: false; // –≤—Å–µ–≥–¥–∞ false
  familySize?: 0; // –≤—Å–µ–≥–¥–∞ 0
  familyId?: undefined; // –≤—Å–µ–≥–¥–∞ undefined
}

// üéØ –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –ê–ì–†–ï–ì–ê–¶–ò–ò –ü–û–ó–ò–¶–ò–ô

// –ü–æ–∫—É–ø–∫–∞ –≤ —Å–æ—Å—Ç–∞–≤–µ –ø–æ–∑–∏—Ü–∏–∏
export interface PositionPurchase {
  transactionId: string;
  amountUSD: number;
  tokenAmount: number;
  price: number;
  timestamp: Date;
}

// –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
export interface AggregatedPosition {
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  
  // –ü–æ–∫—É–ø–∫–∏
  purchases: PositionPurchase[];
  totalUSD: number;
  totalTokens: number;
  avgPrice: number;
  purchaseCount: number;
  
  // –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
  firstBuyTime: Date;
  lastBuyTime: Date;
  timeWindowMinutes: number;
  
  // –ú–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–±–∏–≤–∫–∏
  avgPurchaseSize: number;
  maxPurchaseSize: number;
  minPurchaseSize: number;
  sizeStandardDeviation: number;
  sizeCoefficient: number; // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤–∞—Ä–∏–∞—Ü–∏–∏
  
  // –î–µ—Ç–µ–∫—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
  hasSimilarSizes: boolean;
  sizeTolerance: number; // –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  suspicionScore: number; // 0-100
}

// üÜï –ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –î–õ–Ø –î–ï–¢–ï–ö–¶–ò–ò –ò–ù–°–ê–ô–î–ï–†–û–í
export interface PositionAggregation {
  id: number;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  totalUSD: number;
  purchaseCount: number;
  avgPurchaseSize: number;
  timeWindowMinutes: number;
  suspicionScore: number; // 0-100
  sizeTolerance: number;
  firstBuyTime: Date;
  lastBuyTime: Date;
  detectedAt: Date;
  purchases: Array<{
    transactionId: string;
    amountUSD: number;
    timestamp: Date;
  }>;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  maxPurchaseSize: number;
  minPurchaseSize: number;
  sizeStdDeviation: number;
  sizeCoefficient: number;
  similarSizeCount: number;
  walletAgeDays: number;
  riskLevel: 'LOW' | 'MEDIUM' | 'HIGH';
  isProcessed: boolean;
  alertSent: boolean;
}

// –ê–ª–µ—Ä—Ç –æ —Ä–∞–∑–±–∏–≤–∫–µ –ø–æ–∑–∏—Ü–∏–∏
export interface PositionSplittingAlert {
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  totalUSD: number;
  purchaseCount: number;
  avgPurchaseSize: number;
  timeWindowMinutes: number;
  suspicionScore: number;
  sizeTolerance: number;
  firstBuyTime: Date;
  lastBuyTime: Date;
  purchases: Array<{
    amountUSD: number;
    timestamp: Date;
    transactionId: string;
  }>;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è –≤ –ë–î
export interface SavedPositionAggregation {
  id: number;
  walletAddress: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenName: string;
  totalUSD: number;
  purchaseCount: number;
  avgPurchaseSize: number;
  timeWindowMinutes: number;
  suspicionScore: number;
  sizeTolerance: number;
  firstBuyTime: Date;
  lastBuyTime: Date;
  detectedAt: Date;
  purchases: Array<{
    transactionId: string;
    amountUSD: number;
    timestamp: Date;
  }>;
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
export interface PositionAggregationStats {
  totalPositions: number;
  highSuspicionPositions: number; // score >= 75
  totalValueUSD: number;
  avgSuspicionScore: number;
  topWalletsByPositions: Array<{
    walletAddress: string;
    positionCount: number;
    totalValueUSD: number;
  }>;
  // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  unprocessedPositions: number;
  alertsSent: number;
  riskDistribution: {
    high: number;
    medium: number;
    low: number;
  };
}

// –ì—Ä—É–ø–ø–∞ –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–∫—É–ø–æ–∫
export interface SimilarPurchaseGroup {
  count: number;
  avgAmount: number;
  tolerance: number;
  amounts: number[];
}

// üéØ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –î–ï–¢–ï–ö–¶–ò–ò –ê–ì–†–ï–ì–ê–¶–ò–ò
export interface PositionDetectionConfig {
  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏
  timeWindowMinutes: number;        // 90 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  
  // –ö—Ä–∏—Ç–µ—Ä–∏–∏ —Ä–∞–∑–±–∏–≤–∫–∏ –ø–æ–∑–∏—Ü–∏–∏
  minPurchaseCount: number;         // –ú–∏–Ω–∏–º—É–º 3 –ø–æ–∫—É–ø–∫–∏
  minTotalUSD: number;              // –ú–∏–Ω–∏–º—É–º $10K –æ–±—â–∞—è —Å—É–º–º–∞
  maxIndividualUSD: number;         // –ú–∞–∫—Å–∏–º—É–º $8K –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É
  
  // –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Å—É–º–º
  similarSizeTolerance: number;     // 2% –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–æ–¥–∏–Ω–∞–∫–æ–≤–æ–π —Å—É–º–º–æ–π"
  minSimilarPurchases: number;      // –ú–∏–Ω–∏–º—É–º 3 –ø–æ—Ö–æ–∂–∏–µ –ø–æ–∫—É–ø–∫–∏
  
  // –î—Ä—É–≥–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
  positionTimeoutMinutes: number;   // 180 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
  minSuspicionScore: number;        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –¥–ª—è –∞–ª–µ—Ä—Ç–∞
  
  // –§–∏–ª—å—Ç—Ä—ã –∫–æ—à–µ–ª—å–∫–æ–≤
  minWalletAge: number;            // –ú–∏–Ω–∏–º—É–º 7 –¥–Ω–µ–π –≤–æ–∑—Ä–∞—Å—Ç –∫–æ—à–µ–ª—å–∫–∞
  maxWalletActivity: number;       // –ú–∞–∫—Å–∏–º—É–º 100 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –¥–µ–Ω—å (–∞–Ω—Ç–∏-–±–æ—Ç)
}

// üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –§–ò–õ–¨–¢–†–ê–¶–ò–ò –ö–û–®–ï–õ–¨–ö–ê
export interface WalletFilterResult {
  passed: boolean;
  reason?: string;
  timestamp: Date;
  consecutiveFailures: number;
  lastSuccessTime?: Date;
}

// –ö–µ—à –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
export interface CacheEntry<T = any> {
  data: T;
  timestamp: number;
  expiresAt: number;
  provider: string;
  hitCount: number;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
export interface CacheConfig {
  enabled: boolean;
  defaultTTL: number; // —Å–µ–∫—É–Ω–¥—ã
  maxSize: number; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
  cleanupInterval: number; // —Å–µ–∫—É–Ω–¥—ã
  
  // TTL –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
  methodTTL: Record<string, number>;
}

// –ú–µ—Ç—Ä–∏–∫–∏ MultiProvider —Å–∏—Å—Ç–µ–º—ã
export interface MultiProviderMetrics {
  totalRequests: number;
  successfulRequests: number;
  failedRequests: number;
  avgResponseTime: number;
  
  // –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  totalProviders: number;
  healthyProviders: number;
  primaryProvider: string;
  
  // –ö–µ—à
  cacheHits: number;
  cacheMisses: number;
  cacheHitRate: number;
  cacheSize: number;
  
  // Failover
  failovers: number;
  lastFailoverTime?: Date;
  
  // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏
  providerDistribution: Record<string, number>;
}

// üÜï –†–ê–°–®–ò–†–ï–ù–ò–ï DatabaseStats –° POSITION AGGREGATION
export interface DatabaseStats {
  totalTransactions: number;
  totalWallets: number;
  last24hTransactions: number;
  avgTransactionSize: number;
  // üÜï –ù–û–í–û–ï –ü–û–õ–ï
  positionAggregations: number;
  highSuspicionPositions: number;
  // üÜï –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
  aggregatedTransactions: number;
  insiderAlerts: number;
  unprocessedAlerts: number;
  providerStats: Array<{
    name: string;
    requests: number;
    errors: number;
    successRate: number;
  }>;
}

// üÜï –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –° POSITION AGGREGATION
export interface ProcessingStats {
  totalTransactionsProcessed: number;
  smartMoneyTransactions: number;
  regularTransactions: number;
  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø
  positionAggregations: number;
  suspiciousPositions: number;
  alertsSent: number;
  filteredTransactions: number;
  errorCount: number;
  avgProcessingTime: number;
  lastProcessedTime: Date;
  
  // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
  transactionTypes: {
    swaps: number;
    transfers: number;
    other: number;
  };
  
  // üÜï –£–†–û–í–ù–ò –†–ò–°–ö–ê
  riskLevels: {
    high: number;
    medium: number;
    low: number;
  };
}

// ===== üÜï –ù–û–í–´–ï –¢–ò–ü–´ –î–õ–Ø –í–ù–ï–®–ù–ï–ì–û –ü–û–ò–°–ö–ê –ö–û–®–ï–õ–¨–ö–û–í =====

export interface WalletPerformanceMetrics {
  totalPnL: number;
  winRate: number;
  totalTrades: number;
  avgTradeSize: number;
  maxTradeSize: number;
  minTradeSize: number;
  sharpeRatio: number;
  maxDrawdown: number;
  profitFactor: number;
  avgHoldTime: number; // –≤ —á–∞—Å–∞—Ö
  earlyEntryRate: number; // –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–Ω–Ω–∏—Ö –≤—Ö–æ–¥–æ–≤
  performanceScore?: number; // –æ–±—â–∏–π —Å–∫–æ—Ä 0-100 (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
  recentActivity: Date;
  volumeScore?: number;
}

export interface WalletAnalysisResult {
  address: string;
  isSmartMoney: boolean;
  category?: 'sniper' | 'hunter' | 'trader';
  metrics: WalletPerformanceMetrics;
  disqualificationReasons: string[];
  // üÜï –ù–û–í–û–ï –ø–æ–ª–µ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  analysis?: {
    totalTransactions: number;
    analyzedPeriod: string;
    confidenceScore: number;
  };
  // Family –ø–æ–ª—è –ë–õ–û–ö–ò–†–û–í–ê–ù–´ - –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  familyConnections: []; // –≤—Å–µ–≥–¥–∞ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
}

// üÜï –¢–ò–ü–´ –î–õ–Ø –í–ù–ï–®–ù–ò–• API

export interface ExternalTokenCandidate {
  address: string;
  source: 'dexscreener' | 'jupiter';
  volume24h?: number;
  liquidity?: number;
  marketCap?: number;
  age?: number; // days since creation
  score?: number;
}

export interface ExternalWalletCandidate {
  address: string;
  score: number;
  reasons: string[];
  lastActivity: Date;
  estimatedVolume: number;
  tokenCount: number;
  source: 'token_holders' | 'recent_traders' | 'high_volume';
}

// üÜï –¢–ò–ü–´ –î–õ–Ø –ö–†–ï–î–ò–¢–ù–û–ì–û –ú–ï–ù–ï–î–ñ–ï–†–ê

export interface ApiCreditUsage {
  provider: 'quicknode' | 'alchemy';
  operation: string;
  credits: number;
  timestamp: Date;
  success: boolean;
}

export interface ProviderStats {
  dailyUsage: number;
  hourlyUsage: number;
  totalUsage: number;
  lastReset: Date;
  isAvailable: boolean;
  errorCount: number;
}

export interface CreditManagerStats {
  currentProvider: string;
  providers: Record<string, ProviderStats>;
  totalCreditsToday: number;
  remainingCreditsToday: number;
  hourlyRate: number;
  projectedDailyUsage: number;
}

// üÜï –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê DISCOVERY

export interface DiscoveryStats {
  isRunning: boolean;
  externalSearchEnabled: boolean;
  lastRun?: Date;
  totalAnalyzed: number;
  smartMoneyFound: number;
  newWalletsAdded: number;
  discoveryRate: number;
  creditStats?: CreditManagerStats;
  externalSources?: {
    dexscreener: { requests: number; tokens: number };
    jupiter: { requests: number; tokens: number };
  };
}

// ===== –û–°–¢–ê–õ–¨–ù–´–ï –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –¢–ò–ü–´ (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) =====

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∑–¥–æ—Ä–æ–≤—å—è
export interface ProviderHealth {
  name: string;
  isHealthy: boolean;
  lastCheck: Date;
  responseTime: number;
  errorRate: number;
  consecutiveFailures: number;
  lastSuccessTime?: Date;
}

// üÜï –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–í–ê–ô–î–ï–†–û–í
export interface ProviderStatsExtended {
  quicknode: ProviderStats;
  alchemy: ProviderStats;
  [key: string]: ProviderStats;
}

// üÜï –¢–ò–ü–´ –î–õ–Ø ADVANCED POSITION ANALYSIS
export interface AdvancedPositionAnalysis {
  walletAddress: string;
  analysisType: 'position_splitting' | 'coordinated_buying' | 'wash_trading';
  confidence: number; // 0-100
  riskScore: number; // 0-100
  
  patterns: Array<{
    type: string;
    description: string;
    evidence: any[];
    severity: 'low' | 'medium' | 'high' | 'critical';
  }>;
  
  recommendations: string[];
  shouldAlert: boolean;
  shouldBlock: boolean;
}

// üÜï CONFIGURATION FOR POSITION MONITORING
export interface PositionMonitoringConfig {
  enabled: boolean;
  
  // Thresholds
  minPositionSize: number; // USD
  maxPositionSplits: number;
  timeWindowHours: number;
  
  // Detection sensitivity
  sizeSimilarityThreshold: number; // percentage
  timingThreshold: number; // minutes
  suspicionThreshold: number; // 0-100
  
  // Actions
  autoAlert: boolean;
  autoBlock: boolean;
  telegramNotifications: boolean;
  
  // Advanced features
  mlDetection: boolean;
  behaviorAnalysis: boolean;
  networkAnalysis: boolean;
}

// üÜï WALLET RISK PROFILE
export interface WalletRiskProfile {
  address: string;
  overallRisk: number; // 0-100
  lastUpdated: Date;
  
  riskFactors: {
    newWallet: boolean;
    highActivity: boolean;
    suspiciousPatterns: boolean;
    relatedToKnownActors: boolean;
    positionSplitting: boolean;
    washTrading: boolean;
    frontRunning: boolean;
  };
  
  behaviorMetrics: {
    avgTransactionSize: number;
    transactionFrequency: number;
    tradingHours: number[];
    preferredTokens: string[];
    gasUsagePattern: string;
  };
  
  networkConnections: {
    directConnections: string[];
    clusterMembership: string[];
    suspiciousConnections: number;
  };
}

// üÜï SMART MONEY DETECTION RESULT
export interface SmartMoneyDetectionResult {
  isSmartMoney: boolean;
  confidence: number;
  category: 'sniper' | 'hunter' | 'trader' | 'unknown';
  
  indicators: {
    earlyEntry: boolean;
    highWinRate: boolean;
    largeTrades: boolean;
    consistentProfits: boolean;
    timeConsistency: boolean;
  };
  
  metrics: {
    winRate: number;
    avgTradeSize: number;
    totalPnL: number;
    tradingFrequency: number;
    riskAdjustedReturns: number;
  };
  
  redFlags: string[];
  recommendation: 'monitor' | 'add_to_smart_money' | 'investigate' | 'ignore';
}